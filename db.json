{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/hml.png","path":"images/hml.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/tx.png","path":"images/tx.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1534297049930},{"_id":"source/CNAME","hash":"842e47440450d52543ad226071dc3ce5f5a89269","modified":1522944850966},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1522934820663},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1522934820663},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1522934820664},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1522934820662},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1522934820665},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1522934820666},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1522934820666},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1522934820666},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1522934820667},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1522934820668},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1522941640113},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1522934820667},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1522934820669},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1522934820669},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1522934820696},{"_id":"themes/next/_config.yml","hash":"38e520a8067cf54252e35f92042f22a622ecbd78","modified":1523088484514},{"_id":"source/_posts/version.json","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533557337681},{"_id":"source/_posts/AugustTODO","hash":"70a7a89e81c827132ee1e80387687db1e263d0dc","modified":1533713994245},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1534297064959},{"_id":"source/_posts/Android代码插桩.md","hash":"7a845267c988d93f4a1a7a479fcc1c16a41f57cf","modified":1522992546000},{"_id":"source/_posts/ADB Shell.md","hash":"179aa67fe4a68c0599710582b7fe8936e3ab26bf","modified":1522991090451},{"_id":"source/_posts/OKHttp文档二.md","hash":"78579534f13a9016e5d212af8174f6df09aecd01","modified":1522991655392},{"_id":"source/_posts/DialogFragment实现带数字倒计时和小圆点进度的圆形进度条.md","hash":"1fc12331e1f0e0cf02bde43412ff93cc5725484b","modified":1522991463578},{"_id":"source/_posts/Okhttp文档一.md","hash":"4fbaf3071cc1aa0ed8d8fe18c5a46c11613fd267","modified":1522991573972},{"_id":"source/_posts/Studio使用git无法pull或commit的解决方法.md","hash":"13c61b344ed223bababad7aa4877cd49100421c4","modified":1522990846004},{"_id":"source/_posts/gradle配置.md","hash":"fb41fdc5a34ab5bcd780036f17a9aa4b7ac8e6a1","modified":1533614589782},{"_id":"source/_posts/TODO","hash":"598b1a4b557f6fe4bfa32b7474e4448d5acd54e7","modified":1535601005001},{"_id":"source/_posts/webview上传图片.md","hash":"63573833bd5d71130f112bbdd8d951156240e68b","modified":1533522421080},{"_id":"source/_posts/mac编译vim.md","hash":"184360ab362dd6a92925a38495d1f3a1aa3bfe94","modified":1535621684088},{"_id":"source/_posts/有进度条的Webview.md","hash":"d1a8b07d893463afec55152ce27c83dc94735d31","modified":1522991285088},{"_id":"source/_posts/正则表达式.md","hash":"bce0d75ef2da4390e5cd1304db04371e931c64d2","modified":1522985328015},{"_id":"source/_posts/反编译和重新签名apk.md","hash":"14915b1bcefa49077ec6503cf5ef8a03782278fa","modified":1522992422891},{"_id":"source/_posts/网站收藏.md","hash":"f2cf8f3d241950bade5aa7587d4e2476bf43f52d","modified":1533695158674},{"_id":"source/_posts/浏览器启动app.md","hash":"988dc4008a5e8d288e87380fe9700c38fd964a3a","modified":1522992162272},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1522934820663},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1522934820663},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1522934820663},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1522934820664},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1522934820669},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1522934820670},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1522934820669},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1522934820670},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1522934820670},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1522934820670},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1522934820670},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1522934820671},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1522934820671},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1522934820671},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1522934820671},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1522934820671},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1522934820672},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1522934820672},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1522934820672},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1522934820673},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1522934820674},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1522934820694},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1522934820694},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1522934820694},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1522934820694},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1522934820696},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1522934820697},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1522934820695},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1522934820695},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1522934820695},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1522934820830},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1522934820829},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1522934820829},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522934820735},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522934820673},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1522934820674},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522934820673},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1522934820674},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1522934820675},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1522934820675},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1522934820675},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1522934820675},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1522934820676},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1522934820676},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1522934820677},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1522934820676},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1522934820678},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1522934820678},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1522934820681},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1522934820678},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1522934820681},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1522934820683},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1522934820690},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1522934820689},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1522934820690},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1522934820690},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1522934820691},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1522934820691},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1522934820691},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1522934820698},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1522934820698},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1522934820698},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1522934820699},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1522934820699},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1522934820699},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1522934820700},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1522934820700},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1522934820700},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1522934820735},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1522934820736},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1522934820736},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1522988861218},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1522934820736},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1522934820737},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1522934820737},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1522934820738},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1522934820737},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1522934820738},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1522934820739},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1522934820739},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1522934820740},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522934820740},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1522934820739},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1522934820740},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1522934820741},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1522934820741},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522934820740},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1522934820741},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522934820682},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522934820682},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522934820724},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522934820724},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522934820725},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522934820734},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522934820735},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1522934820677},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1522934820677},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1522934820679},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1522934820679},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1522934820679},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1522934820680},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1522934820680},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1522934820681},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1522934820680},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1522934820682},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522934820683},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522934820682},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1522934820684},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1522934820684},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1522934820684},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1522934820683},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1522934820684},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1522934820685},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1522934820685},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1522934820685},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1522934820686},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1522934820686},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1522934820686},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1522934820687},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1522934820687},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1522934820688},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1522934820686},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1522934820688},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1522934820687},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1522934820688},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1522934820689},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1522934820689},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1522934820689},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1522934820688},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1522934820692},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1522934820693},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1522934820693},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1522934820693},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1522934820724},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1522934820725},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1522934820733},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1522934820724},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1522934820724},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1522934820733},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1522934820734},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1522934820734},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1522934820742},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1522934820742},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1522934820743},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1522934820743},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1522934820744},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1522934820743},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1522934820744},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1522934820744},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1522934820745},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1522934820745},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1522934820746},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1522934820763},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1522934820764},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1522934820754},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1522934820763},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1522934820771},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1522934820771},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1522934820773},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1522934820773},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1522934820771},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1522934820772},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1522934820774},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1522934820774},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1522934820774},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1522934820804},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1522934820802},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1522934820804},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1522934820804},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1522934820805},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1522934820805},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1522934820805},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1522934820808},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1522934820807},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1522934820808},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1522934820808},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1522934820809},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1522934820809},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1522934820809},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1522934820809},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1522934820810},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1522934820811},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1522934820810},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1522934820811},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1522934820811},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1522934820812},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1522934820812},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1522934820813},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1522934820814},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1522934820807},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1522934820806},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1522934820823},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1522934820823},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1522934820807},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1522934820828},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1522934820828},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1522934820827},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1522934820762},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1522934820803},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1522934820692},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1522934820692},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1522934820701},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1522934820701},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1522934820702},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1522934820702},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1522934820702},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1522934820707},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1522934820715},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1522934820721},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1522934820722},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1522934820721},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1522934820723},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1522934820722},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1522934820723},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1522934820723},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1522934820726},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1522934820726},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1522934820725},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1522934820727},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1522934820727},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522934820728},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1522934820727},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1522934820728},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1522934820729},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1522934820729},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1522934820730},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522934820730},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1522934820730},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1522934820732},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1522934820731},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1522934820731},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1522934820732},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1522934820732},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1522934820733},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1522934820745},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1522934820750},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1522934820754},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1522934820753},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1522934820764},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1522934820764},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1522934820765},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1522934820765},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1522934820765},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1522934820766},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1522934820769},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1522934820770},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1522934820773},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1522934820772},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1522934820769},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1522934820775},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1522934820776},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1522934820775},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1522934820822},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1522934820823},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1522934820752},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1522934820799},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1522934820801},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1522934820826},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1522934820703},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1522934820703},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1522934820703},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1522934820703},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1522934820704},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1522934820704},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1522934820705},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1522934820704},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1522934820705},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1522934820706},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1522934820706},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1522934820706},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1522934820705},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1522934820707},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1522934820706},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1522934820708},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1522934820709},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1522934820708},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1522934820707},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1522934820708},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1522934820709},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1522934820709},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1522934820710},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1522934820710},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1522934820709},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1522934820711},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1522934820710},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1522934820711},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1522934820711},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1522934820712},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1522934820710},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1522934820712},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1522934820712},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1522934820713},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1522934820713},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1522934820713},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1522934820714},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1522934820714},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1522934820715},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1522934820715},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1522934820716},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1522934820716},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1522934820717},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1522934820713},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1522934820717},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1522934820717},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1522934820718},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1522934820718},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1522934820716},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1522934820719},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1522934820719},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1522934820718},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1522934820719},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1522934820720},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1522934820720},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1522934820720},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1522934820720},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1522934820721},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1522934820747},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522934820731},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522934820728},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1522934820728},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1522934820748},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1522934820750},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1522934820749},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1522934820748},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1522934820767},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1522934820767},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1522934820767},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1522934820768},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1522934820766},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1522934820766},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1522934820783},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1522934820786},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1522934820793},{"_id":"source/_posts/微立体个人求职简历PPT模板.pptx","hash":"4a1276e93d9e06f02064b32d70219b2a9b6cedd4","modified":1527998018000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1522934820762},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1522934820821},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1522934820791},{"_id":"themes/next/source/images/hml.png","hash":"eaff38c8401013282f38bcb8a26af97f36fac4ca","modified":1522988769261},{"_id":"themes/next/source/images/tx.png","hash":"133e38384c865e670ca8a15155d4178a7f8c7e4d","modified":1522989419843}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"","source":"_posts/version.json","raw":"","slug":"version","published":1,"date":"2018-08-06T12:08:57.681Z","updated":"2018-08-06T12:08:57.681Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiq700000tekrkbvjomht"},{"title":"Android代码插桩","date":"2017-08-05T16:00:00.000Z","_content":"\n## 定个小目标\n\n为了采集android网络性能数据，最简单直接的方式是我们可以在每个网络请求方法中打印相关数据日志上传。然而在生产环境中明显不可行，我们需要实现非侵入的，全量的数据采集，那么AOP成了关键。下面以网络性能数据收集SDK开发为例说明怎样一步步实现Android上的AOP。\n\n## 聊聊AOP\n\n### 生活中AOP的影子\n\n\"什么时候出发？\"  \n\n\"明天\"\n\n\"累了就回家\"\n\n这句“累了就回家”就是生活中的AOP，临行前的叮嘱，期间的问候，回家后的温暖，这是AOP做的事,和出门要做的事并没有什么关系。\n\n### Android AOP方式\n\nAOP实现原理上可以分为运行时AOP和编译时AOP：\n\n**运行时AOP：**hook某些关键方法,主流框架有Dexposed,Xposed等\n\n**编译时AOP：**apk打包过程中对class文件的字节码进行扫描更改,主流框架aspactJ,ASM。\n\n***不同工具库优劣势对比***\n\n|工具库|方式|能力|缺点|学习曲线|\n|---|---|---|---|---|\n|XPosed|运行时hook|1. 能hook自己应用进程的方法；</br> 2. 能hook别的应用的方法；</br> 3. 能hook系统方法；|1. 手机需要root;</br>2. 依赖三方包的支持，碎片化严重兼容性差；|一般|\n| DexPosed\t| 运行时hook\t|能hook自己应用进程的方法；|1. 目前不支持4.4以及5.1以上的系统；</br> 2. 依赖三方包的支持，碎片化严重兼容性差；|一般|\n| AspectJ |编译时字节码注入|可以在编译成字节码的过程中插入代码；|官方有Eclipse插件，但没有Android Studio插件，需要替换编译器，环境不好部署；|一般|\n|ASM|编译时或者运行期字节码注入|可以在字节码中文件或者ClassLoader加载字节码的时候插入代码；|需要熟悉字节码语法；|陡峭|\n\n\n***我们采用的AOP方式：***\n\nSDK的难点是数据的采集，手动埋点的方式无疑是行不通的，一方面代价太大且容易产生错误，另一方面对于没有源代码的第三方库我们无法直接修改，因而不能满足我们的需求。我们选择在应用构建期间通过修改字节码的方式来进行代码插桩。\n\n应用构建过程：\n\n![打包流程](https://ws2.sinaimg.cn/large/006tKfTcgy1fj8huamog8j30ew0oiac0.jpg)\n\n应用中所有的class文件包括引用的第三方库中的class，都会经由dex过程，被转化为一个或者多个dex文件，正因为所有的class文件都会在dex这一步被处理，所以我们选择在这里进行字节码插桩。hook Android编译打包流程并借助ASM库对项目字节码文件进行统一扫描，过滤以及修改。\n\n## 说点细节\n\n###  一个简单的demo\n```java\nURL mURL = new URL(url);\nHttpURLConnection conn = (HttpURLConnection) mURL.openConnection();\n```\n\n如果我们想对openConnection()这个方法动点手脚，比如在执行方法开始时打印系统时间，但不能影响其他逻辑。那么我们可以新建一个代理类Monitor:\n\n```java\npublic class Monitor{\n\tprivate static final String TAG=\"Monitor\";\n\tpublic static HttpURLConnection hookOpenConnection(URL url){\n\t\tLog.d(TAG,System.currentTimeMillis());\n\t\t//原方法逻辑不能修改\n\t\treturn (HttpURLConnection)url.openConnection();\n\t}\n}\n```\n\n如果编译修改后的方法变成这样\n\n```java\nURL mURL = new URL(url);\nHttpURLConnection conn = Monitor.hookOpenConnection(url);\n```\n那么目的就达到了，如何去替换成我们的代理类呢，不得不说我们的主角ASM和gradle了。\n\n\n>***我们要做的：***\n>\n>1. gradle插件\n>\n>2. ASM修改字节码\n>\n>3. 业务代码\n\n\n###  插桩入口 transform api\n\nAndroid Gradle Plugin 1.5.0后提供了transform api用作字节码插桩的入口。细节可查看[官方API](http://tools.android.com/tech-docs/new-build-system/transform-api)。\n\n对于1.5.0版本一下的情况，可hook dex.jar实现，具体实现可参考博客[APM之原理篇](http://blog.csdn.net/sgwhp/article/details/50239747)。\n\n### 字节码操作工具ASM\n\nASM是一个java字节码操纵框架，它能被用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。类似功能的工具库还有javassist，BCEL等。\n\n使用不同工具库生成同一个类的耗时：\n\n|Framework  | First time  | Later times|  \n|---|:---:|:---:|\n|Javassist  | 257  | 5.2  |\n|BCEL  | 473  |  5.5|\n|ASM  | 62.4  |  1.1|\n\n因为灵活强大高效，所以选择ASM作为字节码操作工具。\n\n#### ASM API简介\n\nASM（core api） 按照visitor模式按照class文件结构依次访问class文件的每一部分，有如下几个重要的visitor。\n\n###### ClassVisitor\n\n```java\npublic abstract class ClassVisitor{\n    public ClassVisitor(int api);\n    public ClassVisitor(int api, ClassVisitor cv);\n    //访问类名，父类名，实现的接口（数组）等信息\n    public void visit(int version, int access, String name,String signature, String superName, String[] interface);\n    //访问内部类\n    public void visitInnerClass(String name, String outerName, String innerName, int access);\n    //访问字段\n    public FieldVisitor visitField(int access , String name, String desc, String signature, Object value);\n    //访问方法\n    public MethodVisitor visitMethod(int access, String name ,String desc, String signature, String[] Exceptions);\n    void visitEnd();\n}\n```\n\n\n###### MethodVisitor\n\n```java\npublic abstract class MethodVisitor{\n    //开始访问方法体内的代码\n    public void visitCode();\n    //访问方法的try catch block\n    public void visitTryCatchBlock(Label start, Label end, Label handler, String type);\n    //指令，访问局部变量表里面的某个局部变量\n    public void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index);\n    //指令，表示class方法体里面的字节码指令(如 IADD， ICONST_0, ARETRURN等字节码指令)\n    public void visitXxxInsn();\n    //如果方法体中有跳转指令，字节码指令中会出现label，所谓label可以近似看成行号的标记，指示跳转到的位置\n    public void visitLabel(Label label);\n    //记录当前栈帧状态，用于class文件加载时的校验\n    public void visitFrame(int type, int nLocal, Object[] local, int nStack, Object[] stack);\n    //指定当前方法的栈帧中，局部变量表和操作数栈的大小（java栈大小是javac之后就确定的）\n    public void visitMaxs(int maxStack, int maxLocals);\n}\n```\n\n#### 字节码基础\n\n##### java类型描述符\n\n|Java type  |  Type descriptor|\n|---|---|\n|boolean  |   Z|\n|char  |  C|\n|byte  |  B|\n|short  |  S|\n|int  |  I|\n|float  |  F|\n|long  |  J|\n|double  |  D|\n|Object  |  Ljava/lang/Object;|\n|int[]  |  [I|\n|Object[][]  |  [[Ljava/lang/Object;|\n\n> **自定义引用类的表示: \"L全限定名;\"**\n>\n> 如  android.app.Activity 描述符为 \"Landroid/app/Activity;\"\n>\n\n **方法描述符的表示法：**\n \n(参数类型描述符)返回值描述符\n\n```java\nint getId(Object o);\n//描述符为\n(Ljava/lang/Object;)I\n```\n\n##### 局部变量表\n\n顾名思义，存储当前方法中的局部变量，包括方法的入参，第一个是存放的是this\n\n```java\npublic MethodVisitor visitMethod(int access, String name ,String desc, String signature, String[] Exceptions);\n```\n\n刚进入此方法时，局部变量表的槽位状态\n\n\n\n|Slot Number  |value  |\n|---|---|\n|0  | this  |\n|1  |  int access|\n|2  |  String name|\n|3  |  String desc|\n|4  |  String signature|\n|5  |  String[] Exceptions|\n\n#### 实践一下\n\n了解了ASM基础知识，下面来实现我们的demo\n\n##### 先实现我们的gradle插件\n\n```java\nclass PluginImpl implements Plugin<Project>{\n  @Override\n  void apply (Project project){\n    ...\n    // 调用自定义后的transform\n    android.registerTransform(new InjectTransform());\n    ...\n  }\n}\n\npublic class InjectTransform extends Transform{\n  @Override\n  public void transform((TransformInvocation transformInvocation)\n            throws TransformException, InterruptedException, IOException  {\n              ...\n              //修改字节码\n              transform(file);\n              ...\n  }  \n}\n```\n可见gradle插件只是个工具，提供了接口，真正做工作的还是字节码操作。\n\n##### ASM如何操作字节码\n\nasm操作字节码的简单思路为(以修改方为例)：根据方法名、方法参数和返回值等定位位置，并替换成新的方法。\n\n```java\npublic void transfrom(File file){\n    ...\n        ClassReader classReader = new ClassReader(new FileInputStream(file));\n        ClassWriter classWriter = new ClassWriter(classReader, ClassWriter.COMPUTE_MAXS);\n\n        MonitorClassVisitor monitorClassVisitor = new MonitorClassVisitor(Opcodes.ASM5, classWriter);\n\n        classReader.accept(monitorClassVisitor, ClassReader.EXPAND_FRAMES);\n        FileOutputStream fileOutputStream = new FileOutputStream(file);\n        fileOutputStream.write(classWriter.toByteArray());\n    ...\n  }\n```\n```java\n//操作字节码的具体实现类\npublic class MonitorClassVisitor extends ClassVisitor{\n      @Override\n      MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n        MethodVisitor methodVisitor;\n        methodVisitor = super.visitMethod(access, name, desc, signature, exceptions);\n\n        return new MonitorMethodVisitor(Opcodes.ASM5, methodVisitor, access, name, desc);\n  }\n}\n```\n```java\n//修改替换方法的实现类\npublic class MonitorMethodVisitor extends AdviceAdapter{\n    @Overrid\n   void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n     //将满足判断条件的方法修改成要替换的方法\n        if (\"openConnection\".equals(name) && \"()Ljava/net/URLConnection;\".equals(desc)&&\n        \"java/net/HttpURLConnection\".equals(owner)) {\n            mv.visitMethodInsn(INVOKESTATIC, \"com/monitor/Monitor\", \"hookOpenConnection\",\n            \"(Ljava/net/URL;)Ljava/net/HttpURLConnection;\", false)\n        }else{\n            super.visitMethodInsn(opcode, owner, name, desc, itf);\n    }\n}\n```\n编译查看.class文件，已经变成了``HttpURLConnectionconn=Monitor.hookOpenConnection(url);`` 成功替换了方法调用。\n\n\n## 总结一下\n\n#### 做了什么？\n\n不知道方法在做什么，但是缺了点什么，想要加点内容进去还能神不知鬼不觉，该怎么办？\n\n#### 怎么做的？\n\n先让gradle找到这个方法，再让ASM去和字节码交流，达成共识，替换成我们的方法，当然不忘初衷的事就需要考验ASM的真诚了，如果修改了原方法的逻辑，说不定下一个方法就会发现找不到上一个方法的返回值。所以，多点真诚，少点bug。\n\n#### 不足之处？\n\n需要对ASM熟悉，分析需要hook的源码，适配不同框架，甚至对同一个框架不同版本也需要适配，比如okhttp2 和okhttp3。\n","source":"_posts/Android代码插桩.md","raw":"---\ntitle: Android代码插桩\ndate: 2017-08-06 \ntags:\n---\n\n## 定个小目标\n\n为了采集android网络性能数据，最简单直接的方式是我们可以在每个网络请求方法中打印相关数据日志上传。然而在生产环境中明显不可行，我们需要实现非侵入的，全量的数据采集，那么AOP成了关键。下面以网络性能数据收集SDK开发为例说明怎样一步步实现Android上的AOP。\n\n## 聊聊AOP\n\n### 生活中AOP的影子\n\n\"什么时候出发？\"  \n\n\"明天\"\n\n\"累了就回家\"\n\n这句“累了就回家”就是生活中的AOP，临行前的叮嘱，期间的问候，回家后的温暖，这是AOP做的事,和出门要做的事并没有什么关系。\n\n### Android AOP方式\n\nAOP实现原理上可以分为运行时AOP和编译时AOP：\n\n**运行时AOP：**hook某些关键方法,主流框架有Dexposed,Xposed等\n\n**编译时AOP：**apk打包过程中对class文件的字节码进行扫描更改,主流框架aspactJ,ASM。\n\n***不同工具库优劣势对比***\n\n|工具库|方式|能力|缺点|学习曲线|\n|---|---|---|---|---|\n|XPosed|运行时hook|1. 能hook自己应用进程的方法；</br> 2. 能hook别的应用的方法；</br> 3. 能hook系统方法；|1. 手机需要root;</br>2. 依赖三方包的支持，碎片化严重兼容性差；|一般|\n| DexPosed\t| 运行时hook\t|能hook自己应用进程的方法；|1. 目前不支持4.4以及5.1以上的系统；</br> 2. 依赖三方包的支持，碎片化严重兼容性差；|一般|\n| AspectJ |编译时字节码注入|可以在编译成字节码的过程中插入代码；|官方有Eclipse插件，但没有Android Studio插件，需要替换编译器，环境不好部署；|一般|\n|ASM|编译时或者运行期字节码注入|可以在字节码中文件或者ClassLoader加载字节码的时候插入代码；|需要熟悉字节码语法；|陡峭|\n\n\n***我们采用的AOP方式：***\n\nSDK的难点是数据的采集，手动埋点的方式无疑是行不通的，一方面代价太大且容易产生错误，另一方面对于没有源代码的第三方库我们无法直接修改，因而不能满足我们的需求。我们选择在应用构建期间通过修改字节码的方式来进行代码插桩。\n\n应用构建过程：\n\n![打包流程](https://ws2.sinaimg.cn/large/006tKfTcgy1fj8huamog8j30ew0oiac0.jpg)\n\n应用中所有的class文件包括引用的第三方库中的class，都会经由dex过程，被转化为一个或者多个dex文件，正因为所有的class文件都会在dex这一步被处理，所以我们选择在这里进行字节码插桩。hook Android编译打包流程并借助ASM库对项目字节码文件进行统一扫描，过滤以及修改。\n\n## 说点细节\n\n###  一个简单的demo\n```java\nURL mURL = new URL(url);\nHttpURLConnection conn = (HttpURLConnection) mURL.openConnection();\n```\n\n如果我们想对openConnection()这个方法动点手脚，比如在执行方法开始时打印系统时间，但不能影响其他逻辑。那么我们可以新建一个代理类Monitor:\n\n```java\npublic class Monitor{\n\tprivate static final String TAG=\"Monitor\";\n\tpublic static HttpURLConnection hookOpenConnection(URL url){\n\t\tLog.d(TAG,System.currentTimeMillis());\n\t\t//原方法逻辑不能修改\n\t\treturn (HttpURLConnection)url.openConnection();\n\t}\n}\n```\n\n如果编译修改后的方法变成这样\n\n```java\nURL mURL = new URL(url);\nHttpURLConnection conn = Monitor.hookOpenConnection(url);\n```\n那么目的就达到了，如何去替换成我们的代理类呢，不得不说我们的主角ASM和gradle了。\n\n\n>***我们要做的：***\n>\n>1. gradle插件\n>\n>2. ASM修改字节码\n>\n>3. 业务代码\n\n\n###  插桩入口 transform api\n\nAndroid Gradle Plugin 1.5.0后提供了transform api用作字节码插桩的入口。细节可查看[官方API](http://tools.android.com/tech-docs/new-build-system/transform-api)。\n\n对于1.5.0版本一下的情况，可hook dex.jar实现，具体实现可参考博客[APM之原理篇](http://blog.csdn.net/sgwhp/article/details/50239747)。\n\n### 字节码操作工具ASM\n\nASM是一个java字节码操纵框架，它能被用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。类似功能的工具库还有javassist，BCEL等。\n\n使用不同工具库生成同一个类的耗时：\n\n|Framework  | First time  | Later times|  \n|---|:---:|:---:|\n|Javassist  | 257  | 5.2  |\n|BCEL  | 473  |  5.5|\n|ASM  | 62.4  |  1.1|\n\n因为灵活强大高效，所以选择ASM作为字节码操作工具。\n\n#### ASM API简介\n\nASM（core api） 按照visitor模式按照class文件结构依次访问class文件的每一部分，有如下几个重要的visitor。\n\n###### ClassVisitor\n\n```java\npublic abstract class ClassVisitor{\n    public ClassVisitor(int api);\n    public ClassVisitor(int api, ClassVisitor cv);\n    //访问类名，父类名，实现的接口（数组）等信息\n    public void visit(int version, int access, String name,String signature, String superName, String[] interface);\n    //访问内部类\n    public void visitInnerClass(String name, String outerName, String innerName, int access);\n    //访问字段\n    public FieldVisitor visitField(int access , String name, String desc, String signature, Object value);\n    //访问方法\n    public MethodVisitor visitMethod(int access, String name ,String desc, String signature, String[] Exceptions);\n    void visitEnd();\n}\n```\n\n\n###### MethodVisitor\n\n```java\npublic abstract class MethodVisitor{\n    //开始访问方法体内的代码\n    public void visitCode();\n    //访问方法的try catch block\n    public void visitTryCatchBlock(Label start, Label end, Label handler, String type);\n    //指令，访问局部变量表里面的某个局部变量\n    public void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index);\n    //指令，表示class方法体里面的字节码指令(如 IADD， ICONST_0, ARETRURN等字节码指令)\n    public void visitXxxInsn();\n    //如果方法体中有跳转指令，字节码指令中会出现label，所谓label可以近似看成行号的标记，指示跳转到的位置\n    public void visitLabel(Label label);\n    //记录当前栈帧状态，用于class文件加载时的校验\n    public void visitFrame(int type, int nLocal, Object[] local, int nStack, Object[] stack);\n    //指定当前方法的栈帧中，局部变量表和操作数栈的大小（java栈大小是javac之后就确定的）\n    public void visitMaxs(int maxStack, int maxLocals);\n}\n```\n\n#### 字节码基础\n\n##### java类型描述符\n\n|Java type  |  Type descriptor|\n|---|---|\n|boolean  |   Z|\n|char  |  C|\n|byte  |  B|\n|short  |  S|\n|int  |  I|\n|float  |  F|\n|long  |  J|\n|double  |  D|\n|Object  |  Ljava/lang/Object;|\n|int[]  |  [I|\n|Object[][]  |  [[Ljava/lang/Object;|\n\n> **自定义引用类的表示: \"L全限定名;\"**\n>\n> 如  android.app.Activity 描述符为 \"Landroid/app/Activity;\"\n>\n\n **方法描述符的表示法：**\n \n(参数类型描述符)返回值描述符\n\n```java\nint getId(Object o);\n//描述符为\n(Ljava/lang/Object;)I\n```\n\n##### 局部变量表\n\n顾名思义，存储当前方法中的局部变量，包括方法的入参，第一个是存放的是this\n\n```java\npublic MethodVisitor visitMethod(int access, String name ,String desc, String signature, String[] Exceptions);\n```\n\n刚进入此方法时，局部变量表的槽位状态\n\n\n\n|Slot Number  |value  |\n|---|---|\n|0  | this  |\n|1  |  int access|\n|2  |  String name|\n|3  |  String desc|\n|4  |  String signature|\n|5  |  String[] Exceptions|\n\n#### 实践一下\n\n了解了ASM基础知识，下面来实现我们的demo\n\n##### 先实现我们的gradle插件\n\n```java\nclass PluginImpl implements Plugin<Project>{\n  @Override\n  void apply (Project project){\n    ...\n    // 调用自定义后的transform\n    android.registerTransform(new InjectTransform());\n    ...\n  }\n}\n\npublic class InjectTransform extends Transform{\n  @Override\n  public void transform((TransformInvocation transformInvocation)\n            throws TransformException, InterruptedException, IOException  {\n              ...\n              //修改字节码\n              transform(file);\n              ...\n  }  \n}\n```\n可见gradle插件只是个工具，提供了接口，真正做工作的还是字节码操作。\n\n##### ASM如何操作字节码\n\nasm操作字节码的简单思路为(以修改方为例)：根据方法名、方法参数和返回值等定位位置，并替换成新的方法。\n\n```java\npublic void transfrom(File file){\n    ...\n        ClassReader classReader = new ClassReader(new FileInputStream(file));\n        ClassWriter classWriter = new ClassWriter(classReader, ClassWriter.COMPUTE_MAXS);\n\n        MonitorClassVisitor monitorClassVisitor = new MonitorClassVisitor(Opcodes.ASM5, classWriter);\n\n        classReader.accept(monitorClassVisitor, ClassReader.EXPAND_FRAMES);\n        FileOutputStream fileOutputStream = new FileOutputStream(file);\n        fileOutputStream.write(classWriter.toByteArray());\n    ...\n  }\n```\n```java\n//操作字节码的具体实现类\npublic class MonitorClassVisitor extends ClassVisitor{\n      @Override\n      MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n        MethodVisitor methodVisitor;\n        methodVisitor = super.visitMethod(access, name, desc, signature, exceptions);\n\n        return new MonitorMethodVisitor(Opcodes.ASM5, methodVisitor, access, name, desc);\n  }\n}\n```\n```java\n//修改替换方法的实现类\npublic class MonitorMethodVisitor extends AdviceAdapter{\n    @Overrid\n   void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n     //将满足判断条件的方法修改成要替换的方法\n        if (\"openConnection\".equals(name) && \"()Ljava/net/URLConnection;\".equals(desc)&&\n        \"java/net/HttpURLConnection\".equals(owner)) {\n            mv.visitMethodInsn(INVOKESTATIC, \"com/monitor/Monitor\", \"hookOpenConnection\",\n            \"(Ljava/net/URL;)Ljava/net/HttpURLConnection;\", false)\n        }else{\n            super.visitMethodInsn(opcode, owner, name, desc, itf);\n    }\n}\n```\n编译查看.class文件，已经变成了``HttpURLConnectionconn=Monitor.hookOpenConnection(url);`` 成功替换了方法调用。\n\n\n## 总结一下\n\n#### 做了什么？\n\n不知道方法在做什么，但是缺了点什么，想要加点内容进去还能神不知鬼不觉，该怎么办？\n\n#### 怎么做的？\n\n先让gradle找到这个方法，再让ASM去和字节码交流，达成共识，替换成我们的方法，当然不忘初衷的事就需要考验ASM的真诚了，如果修改了原方法的逻辑，说不定下一个方法就会发现找不到上一个方法的返回值。所以，多点真诚，少点bug。\n\n#### 不足之处？\n\n需要对ASM熟悉，分析需要hook的源码，适配不同框架，甚至对同一个框架不同版本也需要适配，比如okhttp2 和okhttp3。\n","slug":"Android代码插桩","published":1,"updated":"2018-04-06T05:29:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqdo0001tekrqdgktfuf"},{"title":"OKHttp文档二","date":"2016-06-30T16:00:00.000Z","_content":"\n## 同步获取\n\n下载一个文件，以字符串形式打印他的头和响应体.\n\nstring()方法对于小的文档来说方便且高效，但是如果响应体大于1M, 避免使用string()，因为会加载到内存中，这种情况下，将响应体以流的方式处理更好。\n\n```java\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throw Exception{\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \"+response);       \n\n    Headers responseHeaders = response.headers();\n    for (int i =0;i<responseHeaders.size() ;i++ ) {\n      System.out.println(responseHeaders.name(i)+\": \"+responseHeaders.value(i));\n    }\n    System.out.println(response.body().string());\n  }\n```\n\n## 异步获取\n\n在一个工作线程上下载一个文件,当响应可读时得到回调，在响应头准备好后回调，当阻塞时读取响应体，OkHttp目前不提供异步接收部分响应体的API\n\n```java\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throw Exception{\n    Request request = new Request.Builder()\n      .url(\"http://publicobject.com/helloworld.txt\")\n      .build();\n\n    client.newCall(request).enqueue(new Callback(){\n      @Override\n      public void onFailure(Call call, IOException e){\n        e.printStackTrace();\n      }\n\n      @Override\n      public void onResponse(Call call, Response response)throw IOException{\n        if (!response.isSuccessful())throw new IOException(\"Unexpected code \"+ response);\n\n        Headers responseHeaders = response.headers();\n        for (int i =0;size=responseHeaders.size() ; i++) {\n          System.out.println(responseHeaders.name(i)+\": \"+responseHeaders.value(i));\n        }\n\n        System.out.println(response.body().string());\n      }\n    })\n  }\n```\n\n## 访问头\n\n通常情况下HTTP头格式相似 Map\n\n<string,string>： 每一个键对应一个值或者没有值，但是一些头允许多个值，比如HTTP响应支持多个变化的头是合法和常见的，OKHttp的api试图使两种情况更方便。</string,string>\n\n当写请求头时，使用header(name,value)键值对，使得值只有唯一的名称. 新添加值之前，已经存在的值将会被删除，使用方法addHeader(name, value)方法在没有移除已经存在的值的情况下添加一个头。\n\n当读取响应头时，使用方法header(name)返回最后一个命名的值。如果没有展示任何值，方法header(name)将返回null，headers(name)方法将以列表形式读取所有的值.\n\nHeaders类可以通过index获取，可以用来访问所有的headers。\n\n```java\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception{\n    Request request = new Request.Builder()\n      .url(\"https://api.github.com/repos/square/okhttp/issues\")\n      .header(\"User-Agent\",\"OkHttp Headers.java\")\n      .addHeader(\"Accept\",\"application/json; q=0.5\")\n      .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n      .build();\n\n    Response rsponse = client.newCall(request).execute();\n    if (!response.isSuccessful())throw new IOException(\"Unexpected code \"+ response);\n\n    System.out.println(\"Server: \" + response.header(\"Server\"));\n    System.out.println(\"Date: \"+ response.header(\"Date\"));\n    System.out.println(\"Vary: \"+ response.headers(\"Vary\"));\n\n  }\n```\n\n## Post一个字符串\n\n使用HTTP POST请求发送一个请求到服务器， 这个例子发送一个markdown文件到web服务器并将markdown文件呈现为html文件。因为整个请求体是同事在内存中的，使用该api避免post超过1M的大文件.\n\n```java\n  public static final MediaType MEDIA_TYPE_MARKDOWN\n      =MediaTyep.parse(\"text/x-markdwon; charset=utf-8\");\n\n  private final OKhttpClient client = new OKhttpClient();\n\n  public void run()throws Exception{\n    String postBody =\"\"\n      + \"Releases\\n\"\n      + \"--------\\n\"\n      + \"\\n\"\n      + \" * _1.0_ May 6, 2013\\n\"\n      + \" * _1.1_ June 15, 2013\\n\"\n      + \" * _1.2_ August 11, 2013\\n\";\n\n  Request request = new Request.Builder()\n      .url(\"https:/api.github.com/markdown/raw\")\n      .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))\n      .build();\n  }\n```\n\n## Post 流\n\n怎么以流的形式去请求， 请求体的内容当被写入的时候生成，项目可能提供一个OutputStream，可以调用BufferedSink.outputStream()方法获取到。\n\n```java\n  public static final MediaType MDEIA_TYPE_MARKDOWN\n    =MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\n  private final OkHttpClient client =new OkHttpClient();\n\n  public void run() throws Exception{\n    RequestBody requestBody = new RequestBody(){\n      @Override\n      public MediaType contentType(){\n        return MEDIA_TYPE_MARKDOWN;\n      }\n\n    @Override\n    public void writeTo(BufferedSink sink)throws IOException{\n      sink.writeUtf8(\"Numbers\\n\");\n      sink.writeUtf8(\"------\\n\");\n      for (int i =2 ;i<=997 ;i++ ) {\n        sink.writeUtf8(String.fromat(\" * %s = %s\\n\", i, factor(i)));\n      }\n    }\n\n    private String factor(int n){\n      for(int i = 2; i<n; i++){\n        int x = n/i;\n        if(x* i==n)return factor(x)+ \" x \"+ i;\n      }\n      return Integer.toString(n);\n    }\n  };\n\n  Request request = new Request.Builder()\n    .url(\"https://api.github.com/markdown/raw\")\n    .post(requestBody)\n    .build();\n\n  Response response = client.newCall(request).execute();\n  if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n  System.out.println(response.body().string());\n  }\n```\n\n## Post 文件\n\n使用一个文件作为请求体比较容易\n\n```java\n  public static final MediaType MEDIA_TYPE_MARKDOWN\n    = MediaType.parse(\"text/x-markdown; charset = utf-8\");\n\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception{\n      File file = new File(\"README.md\");\n      Request request= new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))\n        .build();\n      Response response = client.newCall(request).execute();\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(response.body().string());\n\n  }\n```\n\n## 发布表单参数\n\n使用 `FromBody.Builder`构建一个请求体，就像一个HTML的`<form>`标签一样， 键值会以兼容HTML的表单URL编码进行编码\n\n```java\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception{\n    RequestBody fromBody = new FormBody.Builder()\n      .add(\"search\", \"Jurassic Park\")\n      .build();\n\n    Request request = new Request.Builder()\n      .url(\"https://en.wikipedia.org/w/index.php\")\n      .post(formBdoy)\n      .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(response.body().string());  \n  }\n```\n\n## 混合请求\n\n`MultipartBody.Builder`可以建立HTML文件上传兼容的复杂表单请求体，复杂请求体的每一部分本身就是请求主体，并且可以定义自己的头,比如他的 `Content-Disposition`,如果可用，`Content-Length`和`Content-Type`可以自动添加。\n\n```java\n  private static final String IMGUR_CLIENT_ID = \"...\";\n  private static final MediaType MEDIA_TYPE_PNG = MediaType.parse(\"image/png\");\n  private final OkHttpClient client = new OkHttpClient();\n  public void run() throws Exception {\n    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image\n    RequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"title\", \"Square Logo\")\n        .addFormDataPart(\"image\", \"logo-square.png\",\n            RequestBody.create(MEDIA_TYPE_PNG, new File(\"website/static/logo-square.png\")))\n        .build();\n\n    Request request = new Request.Builder()\n        .header(\"Authorization\", \"Client-ID \" + IMGUR_CLIENT_ID)\n        .url(\"https://api.imgur.com/3/image\")\n        .post(requestBody)\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(response.body().string());\n  }\n```\n\n## 使用Gson解析响应的JSON\n\nGSON是JSON和Java对象之间的转换很方便的API。这里，我们用它来解码从GitHub的API JSON响应。 需要注意的是`ResponseBody.charStream（）`使用的`Content-Type`响应头选择响应体解码时所使用的字符集。如果没有指定字符集默认为UTF-8。\n\n```java\n\nprivate final OkHttpClient client = new OkHttpClient();\nprivate final Gson gson = new Gson();\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n      .build();\n  Response response = client.newCall(request).execute();\n  if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n  Gist gist = gson.fromJson(response.body().charStream(), Gist.class);\n  for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {\n    System.out.println(entry.getKey());\n    System.out.println(entry.getValue().content);\n  }\n}\n\nstatic class Gist {\n  Map<String, GistFile> files;\n}\n\nstatic class GistFile {\n  String content;\n}\n```\n\n## 响应缓存\n\n要缓存响应，需要可以读取和写入的缓存目录，高速缓存的大小有限制。缓存目录应该是私有的，不信任的应用程序不应该能够阅读其内容！\n\n它是有多个缓存同时访问相同的高速缓存目录中的错误。大多数应用程序应该用自己的高速缓存配置调用新OkHttpClient（）一次，，都使用相同的实例。否则，实例将被二级缓存覆盖，破坏响应缓存，程序可能崩溃。\n\n响应缓存使用HTTP标头的所有配置。您可以添加和请求头一样的Cache-Control：max-stale= 3600 和 OkHttp的缓存会为他们服务。网络服务器配置的响应多长时间缓存有自己的响应头，如缓存控制：max-age= 9600。有缓存头强制缓存的响应，强制网络响应，或强制使用条件GET验证的网络响应。\n\n```java\n private final OkHttpClient client;\n\npublic CacheResponse(File cacheDirectory) throws Exception {\n int cacheSize = 10 * 1024 * 1024; // 10 MiB\n Cache cache = new Cache(cacheDirectory, cacheSize);\n\n client = new OkHttpClient.Builder()\n     .cache(cache)\n     .build();\n}\n\npublic void run() throws Exception {\n Request request = new Request.Builder()\n     .url(\"http://publicobject.com/helloworld.txt\")\n     .build();\n\n Response response1 = client.newCall(request).execute();\n if (!response1.isSuccessful()) throw new IOException(\"Unexpected code \" + response1);\n\n String response1Body = response1.body().string();\n System.out.println(\"Response 1 response:          \" + response1);\n System.out.println(\"Response 1 cache response:    \" + response1.cacheResponse());\n System.out.println(\"Response 1 network response:  \" + response1.networkResponse());\n\n Response response2 = client.newCall(request).execute();\n if (!response2.isSuccessful()) throw new IOException(\"Unexpected code \" + response2);\n\n String response2Body = response2.body().string();\n System.out.println(\"Response 2 response:          \" + response2);\n System.out.println(\"Response 2 cache response:    \" + response2.cacheResponse());\n System.out.println(\"Response 2 network response:  \" + response2.networkResponse());\n\n System.out.println(\"Response 2 equals Response 1? \" + response1Body.equals(response2Body));\n}\n```\n\n为了防止使用缓存的响应，使用CacheControl.FORCE_NETWORK。为了防止使用网络，使用CacheControl.FORCE_CACHE。警告：如果您使用FORCE_CACHE并且响应要求网络，OkHttp会返回504 （不满足请求的响应）\n\n## 取消请求\n\n使用`Call.cancel()` 立即停止正在发起的请求。 如果线程正在写请求或者读响应，会得到一个IOException。 这样使用当不再需要请求的时候可以保护网络，比如当你的用户在使用导航的时候。 同步和异步都可以被取消。\n\n```java\n private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n private final OkHttpClient client = new OkHttpClient();\n\n public void run() throws Exception {\n   Request request = new Request.Builder()\n       .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n       .build();\n\n   final long startNanos = System.nanoTime();\n   final Call call = client.newCall(request);\n\n   // Schedule a job to cancel the call in 1 second.\n   executor.schedule(new Runnable() {\n     @Override public void run() {\n       System.out.printf(\"%.2f Canceling call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n       call.cancel();\n       System.out.printf(\"%.2f Canceled call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n     }\n   }, 1, TimeUnit.SECONDS);\n\n   try {\n     System.out.printf(\"%.2f Executing call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n     Response response = call.execute();\n     System.out.printf(\"%.2f Call was expected to fail, but completed: %s%n\",\n         (System.nanoTime() - startNanos) / 1e9f, response);\n   } catch (IOException e) {\n     System.out.printf(\"%.2f Call failed as expected: %s%n\",\n         (System.nanoTime() - startNanos) / 1e9f, e);\n   }\n }\n```\n\n## 超时\n\n使用超时时，其对不可达或者失败的调用。网络分区：可以是由于客户端连接问题，服务器可用性的问题，或其他的任何东西。 OkHttp支持连接，读取和写入超时。\n\n```java\nprivate final OkHttpClient client;\n\npublic ConfigureTimeouts() throws Exception {\n client = new OkHttpClient.Builder()\n     .connectTimeout(10, TimeUnit.SECONDS)\n     .writeTimeout(10, TimeUnit.SECONDS)\n     .readTimeout(30, TimeUnit.SECONDS)\n     .build();\n}\n\npublic void run() throws Exception {\n Request request = new Request.Builder()\n     .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n     .build();\n\n Response response = client.newCall(request).execute();\n System.out.println(\"Response completed: \" + response);\n}\n```\n\n## 单个请求配置\n\n所有的HTTP客户端都在OkHttpClient中配置，包括代理设置，超时和缓存。当你需要改变单一调用的配置，调用OkHttpClient.newBuilder（）。这将返回共享相同的连接池，调度和配置与原来的客户端生成器。在下面的例子中，我们做了500毫秒超时，另外一3000毫秒超时一个请求。\n\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://httpbin.org/delay/1\") // This URL is served with a 1 second delay.\n      .build();\n\n  try {\n    // Copy to customize OkHttp for this request.\n    OkHttpClient copy = client.newBuilder()\n        .readTimeout(500, TimeUnit.MILLISECONDS)\n        .build();\n\n    Response response = copy.newCall(request).execute();\n    System.out.println(\"Response 1 succeeded: \" + response);\n  } catch (IOException e) {\n    System.out.println(\"Response 1 failed: \" + e);\n  }\n\n  try {\n    // Copy to customize OkHttp for this request.\n    OkHttpClient copy = client.newBuilder()\n        .readTimeout(3000, TimeUnit.MILLISECONDS)\n        .build();\n\n    Response response = copy.newCall(request).execute();\n    System.out.println(\"Response 2 succeeded: \" + response);\n  } catch (IOException e) {\n    System.out.println(\"Response 2 failed: \" + e);\n  }\n}\n```\n\n## 认证处理\n\nOkHttp可以自动重试未经授权的请求。当响应为401：没有被授权，Authenticator被要求提供凭据。实现应该建立一个包括缺少凭据的新要求。如果没有凭证可用，则返回null跳过重试。 使用Response.challenges（）来获取任何身份验证挑战计划和领域。当完成一个基本的挑战，用Credentials.basic（用户名，密码），以请求头编码。\n\n```java\nprivate final OkHttpClient client;\n\npublic Authenticate() {\n  client = new OkHttpClient.Builder()\n      .authenticator(new Authenticator() {\n        @Override public Request authenticate(Route route, Response response) throws IOException {\n          System.out.println(\"Authenticating for response: \" + response);\n          System.out.println(\"Challenges: \" + response.challenges());\n          String credential = Credentials.basic(\"jesse\", \"password1\");\n          return response.request().newBuilder()\n              .header(\"Authorization\", credential)\n              .build();\n        }\n      })\n      .build();\n}\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://publicobject.com/secrets/hellosecret.txt\")\n      .build();\n\n  Response response = client.newCall(request).execute();\n  if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n  System.out.println(response.body().string());\n}\n```\n\n为了避免验证时不重试，你可以返回null放弃。例如，当这些确切的凭据已经尝试您可以跳过重试：\n\n```java\nif (credential.equals(response.request().header(\"Authorization\"))) {\n return null; // If we already failed with these credentials, don't retry.\n}\n```\n\n当打一个应用程序尝试被限制,您也可以跳过重试：\n\n```java\nif (responseCount(response) >= 3) {\n   return null; // If we've failed 3 times, give up.\n }\n```\n\n上面的代码依赖于responseCount（）方法：\n\n```java\nprivate int responseCount(Response response) {\n    int result = 1;\n    while ((response = response.priorResponse()) != null) {\n      result++;\n    }\n    return result;\n  }\n```\n\n","source":"_posts/OKHttp文档二.md","raw":"---\ntitle: OKHttp文档二\ndate: 2016-07-01 \ntags:\n---\n\n## 同步获取\n\n下载一个文件，以字符串形式打印他的头和响应体.\n\nstring()方法对于小的文档来说方便且高效，但是如果响应体大于1M, 避免使用string()，因为会加载到内存中，这种情况下，将响应体以流的方式处理更好。\n\n```java\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throw Exception{\n    Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \"+response);       \n\n    Headers responseHeaders = response.headers();\n    for (int i =0;i<responseHeaders.size() ;i++ ) {\n      System.out.println(responseHeaders.name(i)+\": \"+responseHeaders.value(i));\n    }\n    System.out.println(response.body().string());\n  }\n```\n\n## 异步获取\n\n在一个工作线程上下载一个文件,当响应可读时得到回调，在响应头准备好后回调，当阻塞时读取响应体，OkHttp目前不提供异步接收部分响应体的API\n\n```java\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throw Exception{\n    Request request = new Request.Builder()\n      .url(\"http://publicobject.com/helloworld.txt\")\n      .build();\n\n    client.newCall(request).enqueue(new Callback(){\n      @Override\n      public void onFailure(Call call, IOException e){\n        e.printStackTrace();\n      }\n\n      @Override\n      public void onResponse(Call call, Response response)throw IOException{\n        if (!response.isSuccessful())throw new IOException(\"Unexpected code \"+ response);\n\n        Headers responseHeaders = response.headers();\n        for (int i =0;size=responseHeaders.size() ; i++) {\n          System.out.println(responseHeaders.name(i)+\": \"+responseHeaders.value(i));\n        }\n\n        System.out.println(response.body().string());\n      }\n    })\n  }\n```\n\n## 访问头\n\n通常情况下HTTP头格式相似 Map\n\n<string,string>： 每一个键对应一个值或者没有值，但是一些头允许多个值，比如HTTP响应支持多个变化的头是合法和常见的，OKHttp的api试图使两种情况更方便。</string,string>\n\n当写请求头时，使用header(name,value)键值对，使得值只有唯一的名称. 新添加值之前，已经存在的值将会被删除，使用方法addHeader(name, value)方法在没有移除已经存在的值的情况下添加一个头。\n\n当读取响应头时，使用方法header(name)返回最后一个命名的值。如果没有展示任何值，方法header(name)将返回null，headers(name)方法将以列表形式读取所有的值.\n\nHeaders类可以通过index获取，可以用来访问所有的headers。\n\n```java\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception{\n    Request request = new Request.Builder()\n      .url(\"https://api.github.com/repos/square/okhttp/issues\")\n      .header(\"User-Agent\",\"OkHttp Headers.java\")\n      .addHeader(\"Accept\",\"application/json; q=0.5\")\n      .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n      .build();\n\n    Response rsponse = client.newCall(request).execute();\n    if (!response.isSuccessful())throw new IOException(\"Unexpected code \"+ response);\n\n    System.out.println(\"Server: \" + response.header(\"Server\"));\n    System.out.println(\"Date: \"+ response.header(\"Date\"));\n    System.out.println(\"Vary: \"+ response.headers(\"Vary\"));\n\n  }\n```\n\n## Post一个字符串\n\n使用HTTP POST请求发送一个请求到服务器， 这个例子发送一个markdown文件到web服务器并将markdown文件呈现为html文件。因为整个请求体是同事在内存中的，使用该api避免post超过1M的大文件.\n\n```java\n  public static final MediaType MEDIA_TYPE_MARKDOWN\n      =MediaTyep.parse(\"text/x-markdwon; charset=utf-8\");\n\n  private final OKhttpClient client = new OKhttpClient();\n\n  public void run()throws Exception{\n    String postBody =\"\"\n      + \"Releases\\n\"\n      + \"--------\\n\"\n      + \"\\n\"\n      + \" * _1.0_ May 6, 2013\\n\"\n      + \" * _1.1_ June 15, 2013\\n\"\n      + \" * _1.2_ August 11, 2013\\n\";\n\n  Request request = new Request.Builder()\n      .url(\"https:/api.github.com/markdown/raw\")\n      .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))\n      .build();\n  }\n```\n\n## Post 流\n\n怎么以流的形式去请求， 请求体的内容当被写入的时候生成，项目可能提供一个OutputStream，可以调用BufferedSink.outputStream()方法获取到。\n\n```java\n  public static final MediaType MDEIA_TYPE_MARKDOWN\n    =MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\n  private final OkHttpClient client =new OkHttpClient();\n\n  public void run() throws Exception{\n    RequestBody requestBody = new RequestBody(){\n      @Override\n      public MediaType contentType(){\n        return MEDIA_TYPE_MARKDOWN;\n      }\n\n    @Override\n    public void writeTo(BufferedSink sink)throws IOException{\n      sink.writeUtf8(\"Numbers\\n\");\n      sink.writeUtf8(\"------\\n\");\n      for (int i =2 ;i<=997 ;i++ ) {\n        sink.writeUtf8(String.fromat(\" * %s = %s\\n\", i, factor(i)));\n      }\n    }\n\n    private String factor(int n){\n      for(int i = 2; i<n; i++){\n        int x = n/i;\n        if(x* i==n)return factor(x)+ \" x \"+ i;\n      }\n      return Integer.toString(n);\n    }\n  };\n\n  Request request = new Request.Builder()\n    .url(\"https://api.github.com/markdown/raw\")\n    .post(requestBody)\n    .build();\n\n  Response response = client.newCall(request).execute();\n  if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n  System.out.println(response.body().string());\n  }\n```\n\n## Post 文件\n\n使用一个文件作为请求体比较容易\n\n```java\n  public static final MediaType MEDIA_TYPE_MARKDOWN\n    = MediaType.parse(\"text/x-markdown; charset = utf-8\");\n\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception{\n      File file = new File(\"README.md\");\n      Request request= new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))\n        .build();\n      Response response = client.newCall(request).execute();\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(response.body().string());\n\n  }\n```\n\n## 发布表单参数\n\n使用 `FromBody.Builder`构建一个请求体，就像一个HTML的`<form>`标签一样， 键值会以兼容HTML的表单URL编码进行编码\n\n```java\n  private final OkHttpClient client = new OkHttpClient();\n\n  public void run() throws Exception{\n    RequestBody fromBody = new FormBody.Builder()\n      .add(\"search\", \"Jurassic Park\")\n      .build();\n\n    Request request = new Request.Builder()\n      .url(\"https://en.wikipedia.org/w/index.php\")\n      .post(formBdoy)\n      .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(response.body().string());  \n  }\n```\n\n## 混合请求\n\n`MultipartBody.Builder`可以建立HTML文件上传兼容的复杂表单请求体，复杂请求体的每一部分本身就是请求主体，并且可以定义自己的头,比如他的 `Content-Disposition`,如果可用，`Content-Length`和`Content-Type`可以自动添加。\n\n```java\n  private static final String IMGUR_CLIENT_ID = \"...\";\n  private static final MediaType MEDIA_TYPE_PNG = MediaType.parse(\"image/png\");\n  private final OkHttpClient client = new OkHttpClient();\n  public void run() throws Exception {\n    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image\n    RequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"title\", \"Square Logo\")\n        .addFormDataPart(\"image\", \"logo-square.png\",\n            RequestBody.create(MEDIA_TYPE_PNG, new File(\"website/static/logo-square.png\")))\n        .build();\n\n    Request request = new Request.Builder()\n        .header(\"Authorization\", \"Client-ID \" + IMGUR_CLIENT_ID)\n        .url(\"https://api.imgur.com/3/image\")\n        .post(requestBody)\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(response.body().string());\n  }\n```\n\n## 使用Gson解析响应的JSON\n\nGSON是JSON和Java对象之间的转换很方便的API。这里，我们用它来解码从GitHub的API JSON响应。 需要注意的是`ResponseBody.charStream（）`使用的`Content-Type`响应头选择响应体解码时所使用的字符集。如果没有指定字符集默认为UTF-8。\n\n```java\n\nprivate final OkHttpClient client = new OkHttpClient();\nprivate final Gson gson = new Gson();\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n      .build();\n  Response response = client.newCall(request).execute();\n  if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n  Gist gist = gson.fromJson(response.body().charStream(), Gist.class);\n  for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {\n    System.out.println(entry.getKey());\n    System.out.println(entry.getValue().content);\n  }\n}\n\nstatic class Gist {\n  Map<String, GistFile> files;\n}\n\nstatic class GistFile {\n  String content;\n}\n```\n\n## 响应缓存\n\n要缓存响应，需要可以读取和写入的缓存目录，高速缓存的大小有限制。缓存目录应该是私有的，不信任的应用程序不应该能够阅读其内容！\n\n它是有多个缓存同时访问相同的高速缓存目录中的错误。大多数应用程序应该用自己的高速缓存配置调用新OkHttpClient（）一次，，都使用相同的实例。否则，实例将被二级缓存覆盖，破坏响应缓存，程序可能崩溃。\n\n响应缓存使用HTTP标头的所有配置。您可以添加和请求头一样的Cache-Control：max-stale= 3600 和 OkHttp的缓存会为他们服务。网络服务器配置的响应多长时间缓存有自己的响应头，如缓存控制：max-age= 9600。有缓存头强制缓存的响应，强制网络响应，或强制使用条件GET验证的网络响应。\n\n```java\n private final OkHttpClient client;\n\npublic CacheResponse(File cacheDirectory) throws Exception {\n int cacheSize = 10 * 1024 * 1024; // 10 MiB\n Cache cache = new Cache(cacheDirectory, cacheSize);\n\n client = new OkHttpClient.Builder()\n     .cache(cache)\n     .build();\n}\n\npublic void run() throws Exception {\n Request request = new Request.Builder()\n     .url(\"http://publicobject.com/helloworld.txt\")\n     .build();\n\n Response response1 = client.newCall(request).execute();\n if (!response1.isSuccessful()) throw new IOException(\"Unexpected code \" + response1);\n\n String response1Body = response1.body().string();\n System.out.println(\"Response 1 response:          \" + response1);\n System.out.println(\"Response 1 cache response:    \" + response1.cacheResponse());\n System.out.println(\"Response 1 network response:  \" + response1.networkResponse());\n\n Response response2 = client.newCall(request).execute();\n if (!response2.isSuccessful()) throw new IOException(\"Unexpected code \" + response2);\n\n String response2Body = response2.body().string();\n System.out.println(\"Response 2 response:          \" + response2);\n System.out.println(\"Response 2 cache response:    \" + response2.cacheResponse());\n System.out.println(\"Response 2 network response:  \" + response2.networkResponse());\n\n System.out.println(\"Response 2 equals Response 1? \" + response1Body.equals(response2Body));\n}\n```\n\n为了防止使用缓存的响应，使用CacheControl.FORCE_NETWORK。为了防止使用网络，使用CacheControl.FORCE_CACHE。警告：如果您使用FORCE_CACHE并且响应要求网络，OkHttp会返回504 （不满足请求的响应）\n\n## 取消请求\n\n使用`Call.cancel()` 立即停止正在发起的请求。 如果线程正在写请求或者读响应，会得到一个IOException。 这样使用当不再需要请求的时候可以保护网络，比如当你的用户在使用导航的时候。 同步和异步都可以被取消。\n\n```java\n private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n private final OkHttpClient client = new OkHttpClient();\n\n public void run() throws Exception {\n   Request request = new Request.Builder()\n       .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n       .build();\n\n   final long startNanos = System.nanoTime();\n   final Call call = client.newCall(request);\n\n   // Schedule a job to cancel the call in 1 second.\n   executor.schedule(new Runnable() {\n     @Override public void run() {\n       System.out.printf(\"%.2f Canceling call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n       call.cancel();\n       System.out.printf(\"%.2f Canceled call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n     }\n   }, 1, TimeUnit.SECONDS);\n\n   try {\n     System.out.printf(\"%.2f Executing call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n     Response response = call.execute();\n     System.out.printf(\"%.2f Call was expected to fail, but completed: %s%n\",\n         (System.nanoTime() - startNanos) / 1e9f, response);\n   } catch (IOException e) {\n     System.out.printf(\"%.2f Call failed as expected: %s%n\",\n         (System.nanoTime() - startNanos) / 1e9f, e);\n   }\n }\n```\n\n## 超时\n\n使用超时时，其对不可达或者失败的调用。网络分区：可以是由于客户端连接问题，服务器可用性的问题，或其他的任何东西。 OkHttp支持连接，读取和写入超时。\n\n```java\nprivate final OkHttpClient client;\n\npublic ConfigureTimeouts() throws Exception {\n client = new OkHttpClient.Builder()\n     .connectTimeout(10, TimeUnit.SECONDS)\n     .writeTimeout(10, TimeUnit.SECONDS)\n     .readTimeout(30, TimeUnit.SECONDS)\n     .build();\n}\n\npublic void run() throws Exception {\n Request request = new Request.Builder()\n     .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n     .build();\n\n Response response = client.newCall(request).execute();\n System.out.println(\"Response completed: \" + response);\n}\n```\n\n## 单个请求配置\n\n所有的HTTP客户端都在OkHttpClient中配置，包括代理设置，超时和缓存。当你需要改变单一调用的配置，调用OkHttpClient.newBuilder（）。这将返回共享相同的连接池，调度和配置与原来的客户端生成器。在下面的例子中，我们做了500毫秒超时，另外一3000毫秒超时一个请求。\n\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://httpbin.org/delay/1\") // This URL is served with a 1 second delay.\n      .build();\n\n  try {\n    // Copy to customize OkHttp for this request.\n    OkHttpClient copy = client.newBuilder()\n        .readTimeout(500, TimeUnit.MILLISECONDS)\n        .build();\n\n    Response response = copy.newCall(request).execute();\n    System.out.println(\"Response 1 succeeded: \" + response);\n  } catch (IOException e) {\n    System.out.println(\"Response 1 failed: \" + e);\n  }\n\n  try {\n    // Copy to customize OkHttp for this request.\n    OkHttpClient copy = client.newBuilder()\n        .readTimeout(3000, TimeUnit.MILLISECONDS)\n        .build();\n\n    Response response = copy.newCall(request).execute();\n    System.out.println(\"Response 2 succeeded: \" + response);\n  } catch (IOException e) {\n    System.out.println(\"Response 2 failed: \" + e);\n  }\n}\n```\n\n## 认证处理\n\nOkHttp可以自动重试未经授权的请求。当响应为401：没有被授权，Authenticator被要求提供凭据。实现应该建立一个包括缺少凭据的新要求。如果没有凭证可用，则返回null跳过重试。 使用Response.challenges（）来获取任何身份验证挑战计划和领域。当完成一个基本的挑战，用Credentials.basic（用户名，密码），以请求头编码。\n\n```java\nprivate final OkHttpClient client;\n\npublic Authenticate() {\n  client = new OkHttpClient.Builder()\n      .authenticator(new Authenticator() {\n        @Override public Request authenticate(Route route, Response response) throws IOException {\n          System.out.println(\"Authenticating for response: \" + response);\n          System.out.println(\"Challenges: \" + response.challenges());\n          String credential = Credentials.basic(\"jesse\", \"password1\");\n          return response.request().newBuilder()\n              .header(\"Authorization\", credential)\n              .build();\n        }\n      })\n      .build();\n}\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://publicobject.com/secrets/hellosecret.txt\")\n      .build();\n\n  Response response = client.newCall(request).execute();\n  if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n  System.out.println(response.body().string());\n}\n```\n\n为了避免验证时不重试，你可以返回null放弃。例如，当这些确切的凭据已经尝试您可以跳过重试：\n\n```java\nif (credential.equals(response.request().header(\"Authorization\"))) {\n return null; // If we already failed with these credentials, don't retry.\n}\n```\n\n当打一个应用程序尝试被限制,您也可以跳过重试：\n\n```java\nif (responseCount(response) >= 3) {\n   return null; // If we've failed 3 times, give up.\n }\n```\n\n上面的代码依赖于responseCount（）方法：\n\n```java\nprivate int responseCount(Response response) {\n    int result = 1;\n    while ((response = response.priorResponse()) != null) {\n      result++;\n    }\n    return result;\n  }\n```\n\n","slug":"OKHttp文档二","published":1,"updated":"2018-04-06T05:14:15.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqdq0002tekr2mdhidda"},{"title":"DialogFragment实现带数字倒计时和小圆点进度的圆形进度条","date":"2016-07-05T16:00:00.000Z","_content":"\n最近公司项目需要添加一个在网络不理想时，支付等待倒计时的弹框。开始想通过自定义view画出来，结果因为多个控件都有动画效果宣告失败。 最后利用继承Drawable再加上动画效果得以实现，效果如下：\n\n![](http://img.blog.csdn.net/20160714110840520)\n\n## 实现步骤\n\n**没有交互的自定义view，可以实现一个drawable作为Imageview的背景**\n\n**view的构成：**\n\n- **外围圆环进度条**\n- **圆环内倒计时数字**\n- **圆环下方文字**\n- **文字右边小圆点进度条**\n\n###  自定义Drawable并初始化变量\n\n```java\npublic class CountDownView extends Drawable {\n    private static final String TAG = \"CountDownView\";\n    private final static int PROGRESS_FACTOR = -360;\n    private Paint mPaint;\n    private Paint textPaint;\n    private RectF mArcRect;\n    private float radius;\n\n    //当前进度条进度\n    private float progress;\n    //进度条颜色\n    private int ringColor;\n    //进度条宽度\n    private int ringWidth;\n    //倒计时数字\n    private int showNumber;\n    //字符串颜色\n    private int textColor;\n    //数字颜色\n    private int numColor;\n\n    private String showText = \"正在支付\";\n\n    private int MAX_DOTS_COUNT = 3;\n\n    Paint numPaint;\n\n\n    //小圆点数量\n    private int circularCount;\n\n    private Paint dotPaint;\n\n    private static final float PERCENT_CIRCLER_TO_HEIGHT = 3 / 14f;//半径占父控件高度的比例\n\n    public CountDownView(int ringWidth, int ringColor, int showNumber, int textColor, int numColor) {\n        mPaint = new Paint();\n        numPaint = new Paint();\n        mArcRect = new RectF();\n\n        this.ringWidth = ringWidth;\n        this.ringColor = ringColor;\n        this.showNumber = showNumber;\n        this.textColor = textColor;\n        this.numColor = numColor;\n    }\n\n        @Override\n        public void setAlpha(int alpha) {\n            mPaint.setAlpha(alpha);\n        }\n\n        @Override\n        public void setColorFilter(ColorFilter colorFilter) {\n\n        }\n\n        @Override\n        public int getOpacity() {\n            return mPaint.getAlpha();\n        }\n  }\n```\n\n### 实现draw方法\n\n**画圆环**\n\n```java\n/**\n  - 画圆环 *\n  - @param bounds\n  - @param canvas */\n  private void drawRing(Rect bounds, Canvas canvas) {\n\n     int size = bounds.height() > bounds.width() ? bounds.width() : bounds.height();\n\n     radius = size * PERCENT_CIRCLER_TO_HEIGHT;\n\n     mPaint.setColor(ringColor); mPaint.setStyle(Paint.Style.STROKE); mPaint.setStrokeCap(Paint.Cap.ROUND); mPaint.setAntiAlias(true); mPaint.setStrokeWidth(ringWidth);\n\n     float cirX = bounds.centerX(); float cirY = bounds.centerY() * (27 / 35f);\n\n     canvas.translate(cirX, cirY);\n\n     mArcRect.set(-radius, -radius, radius, radius); canvas.drawArc(mArcRect, -90, progress, false, mPaint); }\n```\n\n**画倒计时数字**\n\n```java\n/**\n    * 画倒计时数字\n    *\n    * @param canvas\n    */\n   private void drawNum(Canvas canvas) {\n       float textSize = radius * 0.75f * 1.5f;\n       mPaint.setTextSize(textSize);\n       mPaint.setTextAlign(Paint.Align.CENTER);\n       mPaint.setColor(textColor);\n       mPaint.setStrokeWidth(ringWidth / 2);\n       mPaint.setStyle(Paint.Style.FILL);\n       float numX = 0;\n       float numY = -(mPaint.descent() + mPaint.ascent()) / 2;\n       canvas.drawText(Integer.toString(showNumber), numX, numY, mPaint);\n   }\n`\n```\n\n**画文字**\n\n```java\n/**\n    * 画字符串\n    *\n    * @param canvas\n    */\n   private void drawText(Rect bounds, Canvas canvas) {\n       textPaint = new Paint();\n       textPaint.setAntiAlias(true);\n       textPaint.setColor(textColor);\n       textPaint.setTextAlign(Paint.Align.CENTER);\n       textPaint.setStyle(Paint.Style.FILL);\n       textPaint.setStrokeWidth(ringWidth / 2);\n       float textSize = radius * 0.4f;\n       textPaint.setTextSize(textSize);\n       float textX = 0;\n       float textY = radius * 1.8f - (textPaint.descent() + textPaint.ascent()) / 2;\n       canvas.drawText(showText, textX, textY, textPaint);\n   }\n```\n\n**画小圆点**\n\n```java\n/**\n     * 画小圆点\n     *\n     * @param canvas\n     */\n    private void drawDots(Canvas canvas) {\n        Rect textBound = new Rect();\n        dotPaint = new Paint();\n        dotPaint.setAntiAlias(true);\n        dotPaint.setColor(textColor);\n        dotPaint.setStyle(Paint.Style.FILL);\n        dotPaint.setStrokeWidth(ringWidth / 2);\n\n        textPaint.getTextBounds(showText, 0, showText.length(), textBound);\n        float dotWidth = textBound.width() / showText.length();\n\n        /**\n         * 三个圆点占用宽度为一个字符所占宽度,设置每个圆点间隔为直径,第一个间距为一个半径,所以半径的计算方法为\n         * 半径 = 一个字符宽度 / ((2*圆点个数-1)+1)\n         */\n\n        float cirRadius = dotWidth / ((2f * MAX_DOTS_COUNT - 1f) * 2f + 1f);\n        float dotX = textBound.width() / 2;\n        float dotY = radius * 1.8f - (textPaint.descent() + textPaint.ascent()) * 0.4f;\n//        Log.d(TAG, \"dotX= \" + dotX + \"\\n\" + \"dotY=\" + dotY);\n        for (int i = 0; i < 4 * circularCount - 1; i += 4) {\n            canvas.drawCircle(dotX + cirRadius * (i + 2), dotY, cirRadius, dotPaint);\n        }\n    }\n```\n\n**实现draw方法（调用以上画控件的方法即可）**\n\n```java\n@Override\n   public void draw(Canvas canvas) {\n       final Rect bounds = getBounds();\n       drawRing(bounds, canvas);\n\n       drawNum(canvas);\n       drawText(bounds, canvas);\n       drawDots(canvas);\n   }\n```\n\n###  设置进度条以及倒计时数字和小圆点个数\n\n```java\npublic int getCircularCount() {\n        return circularCount;\n    }\n\n    public void setCircularCount(int circularCount) {\n        this.circularCount = circularCount;\n        invalidateSelf();\n    }\n\n    public int getShowNumber() {\n        return showNumber;\n    }\n\n    public void setShowNumber(int showNumber) {\n        this.showNumber = showNumber;\n        invalidateSelf();\n    }\n\n    public float getProgress() {\n        return progress / PROGRESS_FACTOR;\n    }\n\n    public void setProgress(float progress) {\n        this.progress = progress * PROGRESS_FACTOR;\n        invalidateSelf();\n\n    }\n```\n\n### 在DialogFragment中使用drawable\n\n**实现DialogFragment，并将countdownview设置为dialogfragment上一个imageview的背景图片**\n\n```java\npublic class CountDownDialogFragment extends DialogFragment {\n\n    private View rootView;\n    ImageView countDown;\n\n    private CountDownView mCdDrawable;\n    private Animator mAnimator;\n    CountDownDialogFragment dialog;\n    private Window window;\n    float width;\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        rootView = inflater.inflate(R.layout.count_down_dialog_frg, container, false);\n        countDown = (ImageView) rootView.findViewById(R.id.count_down_iv);\n        DisplayMetrics dm = getResources().getDisplayMetrics();\n        width = dm.widthPixels;\n\n\n        window = getDialog().getWindow();\n        //背景透明\n        window.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n        //去掉标题\n        getDialog().requestWindowFeature(Window.FEATURE_NO_TITLE);\n        int whites = getResources().getColor(R.color.white);\n        mCdDrawable = new CountDownView(10, whites, 10, whites, whites);\n        countDown.setImageDrawable(mCdDrawable);\n\n        if (mAnimator != null) {\n            mAnimator.cancel();\n        }\n        countDown.setVisibility(View.VISIBLE);\n        mAnimator = prepareAnimator();\n        mAnimator.start();\n        return rootView;\n    }\n```\n\n**使用属性动画，计算进度条progress以及倒计时数字和小圆点的变化规律**\n\n```java\nprivate Animator prepareAnimator() {\n        AnimatorSet animation = new AnimatorSet();\n\n        //进度条动画\n        ObjectAnimator progressAnimator = ObjectAnimator.ofFloat(mCdDrawable, \"progress\", 1f, 0f);\n        progressAnimator.setDuration(10000);\n        progressAnimator.setInterpolator(new LinearInterpolator());\n        progressAnimator.addListener(new Animator.AnimatorListener() {\n            @Override\n            public void onAnimationStart(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                countDown.setVisibility(View.GONE);\n                if (dialog != null)\n                    dialog.dismiss();\n            }\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n                countDown.setVisibility(View.GONE);\n                if (dialog != null)\n                    dialog.dismiss();\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n\n            }\n        });\n\n        // 居中的倒计时数字\n        ObjectAnimator showNumAnimator = ObjectAnimator.ofInt(mCdDrawable, \"showNumber\", 10, 0);\n        showNumAnimator.setDuration(10000);\n        showNumAnimator.setInterpolator(new LinearInterpolator());\n\n        //小圆点进度条\n        ObjectAnimator dotProgressAnimator = ObjectAnimator.ofInt(mCdDrawable, \"circularCount\", 0, 4);\n        dotProgressAnimator.setDuration(1500);\n        dotProgressAnimator.setRepeatCount(ValueAnimator.INFINITE);\n        dotProgressAnimator.setRepeatMode(ValueAnimator.RESTART);\n        dotProgressAnimator.setInterpolator(new LinearInterpolator());\n\n        animation.playTogether(progressAnimator, showNumAnimator, dotProgressAnimator);\n        return animation;\n\n    }\n```\n\n**修改DialogFragment窗体大小，需要在onResume方法中实现**\n\n```java\n@Override\n   public void onResume() {\n       super.onResume();\n       dialog = this;\n       //设置大小\n       window.setLayout((int) (width * 0.4f), (int) (width * 0.4f * (7 / 8f)));\n   }\n```\n\n### 源码请到[Github](https://github.com/lvandroid/CountDownView)\n","source":"_posts/DialogFragment实现带数字倒计时和小圆点进度的圆形进度条.md","raw":"---\ntitle: DialogFragment实现带数字倒计时和小圆点进度的圆形进度条\ndate: 2016-07-06 \ntags:\n---\n\n最近公司项目需要添加一个在网络不理想时，支付等待倒计时的弹框。开始想通过自定义view画出来，结果因为多个控件都有动画效果宣告失败。 最后利用继承Drawable再加上动画效果得以实现，效果如下：\n\n![](http://img.blog.csdn.net/20160714110840520)\n\n## 实现步骤\n\n**没有交互的自定义view，可以实现一个drawable作为Imageview的背景**\n\n**view的构成：**\n\n- **外围圆环进度条**\n- **圆环内倒计时数字**\n- **圆环下方文字**\n- **文字右边小圆点进度条**\n\n###  自定义Drawable并初始化变量\n\n```java\npublic class CountDownView extends Drawable {\n    private static final String TAG = \"CountDownView\";\n    private final static int PROGRESS_FACTOR = -360;\n    private Paint mPaint;\n    private Paint textPaint;\n    private RectF mArcRect;\n    private float radius;\n\n    //当前进度条进度\n    private float progress;\n    //进度条颜色\n    private int ringColor;\n    //进度条宽度\n    private int ringWidth;\n    //倒计时数字\n    private int showNumber;\n    //字符串颜色\n    private int textColor;\n    //数字颜色\n    private int numColor;\n\n    private String showText = \"正在支付\";\n\n    private int MAX_DOTS_COUNT = 3;\n\n    Paint numPaint;\n\n\n    //小圆点数量\n    private int circularCount;\n\n    private Paint dotPaint;\n\n    private static final float PERCENT_CIRCLER_TO_HEIGHT = 3 / 14f;//半径占父控件高度的比例\n\n    public CountDownView(int ringWidth, int ringColor, int showNumber, int textColor, int numColor) {\n        mPaint = new Paint();\n        numPaint = new Paint();\n        mArcRect = new RectF();\n\n        this.ringWidth = ringWidth;\n        this.ringColor = ringColor;\n        this.showNumber = showNumber;\n        this.textColor = textColor;\n        this.numColor = numColor;\n    }\n\n        @Override\n        public void setAlpha(int alpha) {\n            mPaint.setAlpha(alpha);\n        }\n\n        @Override\n        public void setColorFilter(ColorFilter colorFilter) {\n\n        }\n\n        @Override\n        public int getOpacity() {\n            return mPaint.getAlpha();\n        }\n  }\n```\n\n### 实现draw方法\n\n**画圆环**\n\n```java\n/**\n  - 画圆环 *\n  - @param bounds\n  - @param canvas */\n  private void drawRing(Rect bounds, Canvas canvas) {\n\n     int size = bounds.height() > bounds.width() ? bounds.width() : bounds.height();\n\n     radius = size * PERCENT_CIRCLER_TO_HEIGHT;\n\n     mPaint.setColor(ringColor); mPaint.setStyle(Paint.Style.STROKE); mPaint.setStrokeCap(Paint.Cap.ROUND); mPaint.setAntiAlias(true); mPaint.setStrokeWidth(ringWidth);\n\n     float cirX = bounds.centerX(); float cirY = bounds.centerY() * (27 / 35f);\n\n     canvas.translate(cirX, cirY);\n\n     mArcRect.set(-radius, -radius, radius, radius); canvas.drawArc(mArcRect, -90, progress, false, mPaint); }\n```\n\n**画倒计时数字**\n\n```java\n/**\n    * 画倒计时数字\n    *\n    * @param canvas\n    */\n   private void drawNum(Canvas canvas) {\n       float textSize = radius * 0.75f * 1.5f;\n       mPaint.setTextSize(textSize);\n       mPaint.setTextAlign(Paint.Align.CENTER);\n       mPaint.setColor(textColor);\n       mPaint.setStrokeWidth(ringWidth / 2);\n       mPaint.setStyle(Paint.Style.FILL);\n       float numX = 0;\n       float numY = -(mPaint.descent() + mPaint.ascent()) / 2;\n       canvas.drawText(Integer.toString(showNumber), numX, numY, mPaint);\n   }\n`\n```\n\n**画文字**\n\n```java\n/**\n    * 画字符串\n    *\n    * @param canvas\n    */\n   private void drawText(Rect bounds, Canvas canvas) {\n       textPaint = new Paint();\n       textPaint.setAntiAlias(true);\n       textPaint.setColor(textColor);\n       textPaint.setTextAlign(Paint.Align.CENTER);\n       textPaint.setStyle(Paint.Style.FILL);\n       textPaint.setStrokeWidth(ringWidth / 2);\n       float textSize = radius * 0.4f;\n       textPaint.setTextSize(textSize);\n       float textX = 0;\n       float textY = radius * 1.8f - (textPaint.descent() + textPaint.ascent()) / 2;\n       canvas.drawText(showText, textX, textY, textPaint);\n   }\n```\n\n**画小圆点**\n\n```java\n/**\n     * 画小圆点\n     *\n     * @param canvas\n     */\n    private void drawDots(Canvas canvas) {\n        Rect textBound = new Rect();\n        dotPaint = new Paint();\n        dotPaint.setAntiAlias(true);\n        dotPaint.setColor(textColor);\n        dotPaint.setStyle(Paint.Style.FILL);\n        dotPaint.setStrokeWidth(ringWidth / 2);\n\n        textPaint.getTextBounds(showText, 0, showText.length(), textBound);\n        float dotWidth = textBound.width() / showText.length();\n\n        /**\n         * 三个圆点占用宽度为一个字符所占宽度,设置每个圆点间隔为直径,第一个间距为一个半径,所以半径的计算方法为\n         * 半径 = 一个字符宽度 / ((2*圆点个数-1)+1)\n         */\n\n        float cirRadius = dotWidth / ((2f * MAX_DOTS_COUNT - 1f) * 2f + 1f);\n        float dotX = textBound.width() / 2;\n        float dotY = radius * 1.8f - (textPaint.descent() + textPaint.ascent()) * 0.4f;\n//        Log.d(TAG, \"dotX= \" + dotX + \"\\n\" + \"dotY=\" + dotY);\n        for (int i = 0; i < 4 * circularCount - 1; i += 4) {\n            canvas.drawCircle(dotX + cirRadius * (i + 2), dotY, cirRadius, dotPaint);\n        }\n    }\n```\n\n**实现draw方法（调用以上画控件的方法即可）**\n\n```java\n@Override\n   public void draw(Canvas canvas) {\n       final Rect bounds = getBounds();\n       drawRing(bounds, canvas);\n\n       drawNum(canvas);\n       drawText(bounds, canvas);\n       drawDots(canvas);\n   }\n```\n\n###  设置进度条以及倒计时数字和小圆点个数\n\n```java\npublic int getCircularCount() {\n        return circularCount;\n    }\n\n    public void setCircularCount(int circularCount) {\n        this.circularCount = circularCount;\n        invalidateSelf();\n    }\n\n    public int getShowNumber() {\n        return showNumber;\n    }\n\n    public void setShowNumber(int showNumber) {\n        this.showNumber = showNumber;\n        invalidateSelf();\n    }\n\n    public float getProgress() {\n        return progress / PROGRESS_FACTOR;\n    }\n\n    public void setProgress(float progress) {\n        this.progress = progress * PROGRESS_FACTOR;\n        invalidateSelf();\n\n    }\n```\n\n### 在DialogFragment中使用drawable\n\n**实现DialogFragment，并将countdownview设置为dialogfragment上一个imageview的背景图片**\n\n```java\npublic class CountDownDialogFragment extends DialogFragment {\n\n    private View rootView;\n    ImageView countDown;\n\n    private CountDownView mCdDrawable;\n    private Animator mAnimator;\n    CountDownDialogFragment dialog;\n    private Window window;\n    float width;\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        rootView = inflater.inflate(R.layout.count_down_dialog_frg, container, false);\n        countDown = (ImageView) rootView.findViewById(R.id.count_down_iv);\n        DisplayMetrics dm = getResources().getDisplayMetrics();\n        width = dm.widthPixels;\n\n\n        window = getDialog().getWindow();\n        //背景透明\n        window.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n        //去掉标题\n        getDialog().requestWindowFeature(Window.FEATURE_NO_TITLE);\n        int whites = getResources().getColor(R.color.white);\n        mCdDrawable = new CountDownView(10, whites, 10, whites, whites);\n        countDown.setImageDrawable(mCdDrawable);\n\n        if (mAnimator != null) {\n            mAnimator.cancel();\n        }\n        countDown.setVisibility(View.VISIBLE);\n        mAnimator = prepareAnimator();\n        mAnimator.start();\n        return rootView;\n    }\n```\n\n**使用属性动画，计算进度条progress以及倒计时数字和小圆点的变化规律**\n\n```java\nprivate Animator prepareAnimator() {\n        AnimatorSet animation = new AnimatorSet();\n\n        //进度条动画\n        ObjectAnimator progressAnimator = ObjectAnimator.ofFloat(mCdDrawable, \"progress\", 1f, 0f);\n        progressAnimator.setDuration(10000);\n        progressAnimator.setInterpolator(new LinearInterpolator());\n        progressAnimator.addListener(new Animator.AnimatorListener() {\n            @Override\n            public void onAnimationStart(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                countDown.setVisibility(View.GONE);\n                if (dialog != null)\n                    dialog.dismiss();\n            }\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n                countDown.setVisibility(View.GONE);\n                if (dialog != null)\n                    dialog.dismiss();\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n\n            }\n        });\n\n        // 居中的倒计时数字\n        ObjectAnimator showNumAnimator = ObjectAnimator.ofInt(mCdDrawable, \"showNumber\", 10, 0);\n        showNumAnimator.setDuration(10000);\n        showNumAnimator.setInterpolator(new LinearInterpolator());\n\n        //小圆点进度条\n        ObjectAnimator dotProgressAnimator = ObjectAnimator.ofInt(mCdDrawable, \"circularCount\", 0, 4);\n        dotProgressAnimator.setDuration(1500);\n        dotProgressAnimator.setRepeatCount(ValueAnimator.INFINITE);\n        dotProgressAnimator.setRepeatMode(ValueAnimator.RESTART);\n        dotProgressAnimator.setInterpolator(new LinearInterpolator());\n\n        animation.playTogether(progressAnimator, showNumAnimator, dotProgressAnimator);\n        return animation;\n\n    }\n```\n\n**修改DialogFragment窗体大小，需要在onResume方法中实现**\n\n```java\n@Override\n   public void onResume() {\n       super.onResume();\n       dialog = this;\n       //设置大小\n       window.setLayout((int) (width * 0.4f), (int) (width * 0.4f * (7 / 8f)));\n   }\n```\n\n### 源码请到[Github](https://github.com/lvandroid/CountDownView)\n","slug":"DialogFragment实现带数字倒计时和小圆点进度的圆形进度条","published":1,"updated":"2018-04-06T05:11:03.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqdu0003tekr4s6dzeer"},{"title":"ADB Shell","date":"2016-07-08T16:00:00.000Z","_content":"\n# ADB Shell 学习\n\n> 又是一个周末了,最怕闲来无事的周末，于是给自己找点事情做，ADB shell这一块一直没有系统的学习，正好趁此机会学习。\n\n主要通过[学习资料](http://adbshell.com/commands)和adb --help文档学习\n\n### 怎么使用ADB shell命令\n\n首先找到Andorid的SDK安装路径或者单独安装ADB组件，sdk中adb路径在<Android SDK&gt;platform-tools 文件夹下。\n\n**Windows下**\n\n```shell\ncd <adb-path>\n#执行adb命令\nadb shell\n```\n\n**Mac下**\n\n```shell\n#配置adb环境变量\nvi ~/.bash_profile\n#编辑该文件，添加你的adb路径\nexport ADB_PATH= your_adb_path\nexport PATH=${PATH}:${ADB_PATH}\n\n#退出保存再执行命令使得环境变量生效\nsource .bash_profile\n```\n\n### **ADB Debugging命令**\n\n#### **adb devices**\n\n列出连接的设备  \n\n>*adb devices [-l]* '-l'\n\n参数用于指定需要列出的设备\n\n```shell\n#打印连接的设备\nadb devices\n```\n\n返回结果\n\n```shell\n#执行命令返回设备的序列数字和状态\n2b70fc6a        device\n```\n\n#### **adb forward**\n\n重定向连接,需要开启设备的USB debugging模式  \n\n>*adb forward &lt;local&gt; &lt;remote&gt;*   \n *adb froward --no-rebind &lt;local&gt; &lt;remote&gt;*     \n  \n作用同上，但是如果已经连接就会失败  \n\n>*adb forward --remove &lt;local&gt;*\n\n删除指定连接的设备  \n\n>*adb forward --remove-all*\n\n\n```shell\n#映射本地的8000端口到设备的端口9000\nadb forward tcp:8000 tcp:9000\n```\n\n#### **adb kill-server**\n\n终止adb服务进程  如果服务在运行则终止\n\n```shell\nadb kill-server\n```\n\n### **无线连接命令**\n\n#### **adb connect**\n\n> 通过WIFI使用ADB  \n\n*adb connect &lt;host&gt; [:&lt;port&gt;]*\n\n*第一步* 通过USB连接设备\n\n*第二步* 使用命令查看连接的设备\n\n```shell\nadb devices\n```\n\n **注意：** 以上步骤不可忽略\n\n*第三步* 以TCP模式重启端口：5555\n\n*第四步* 查看Android设备的IP地址：设置-&gt;关于手机-&gt;状态-&gt;IP地址，将该IP地址以 #.#.#.# 的格式记录下来\n\n*第五步* 执行命令\n\n```shell\n#   #.#.#.# 为刚刚记录下来的ip地址\nadb connect #.#.#.#\n```\n\n*第六步* 拔掉usb连接线，确认设备是否依然可连接\n\n```shell\nadb devices\n```\n\n返回结果\n\n```shell\n#.#.#.#:5555 device\n```\n\n> **注意**: 确保本地和设备连接的wifi为可访问的同一个局域网\n\n#### **adb disconnect**\n\n断开通过TCP/IP连接的设备  \n\n>*adb disconnect [&lt;host&gt; [:&lt;port&gt;]]*  \n\n不带参数则断开所有TCP/IP连接的设备\n\n#### **adb usb**\n\n重启USB模式的 ADB\n\n```shell\nadb usb\n```\n\n### **App包的管理命令**\n\n#### **adb install**\n\n安装Android应用到设备，需要指定需要安装的 .apk 文件的全路径  \n\n>*adb install [option] <path&gt;*\n\n\n```shell\nadb install test.apk\n```\n\n```shell\n# 给apk上锁，发布 apk 到 android market上时，可以设置相关标志位来保护你的 app。\nadb install -l test.apk\n```\n```shell\n# 重新安装apk\nadb install -r test.apk\n```\n\n```shell\n# 允许测试\nadb install -t test.apk\n```\n\n```shell\n# 在sdcard上安装\nadb install -s test.apk\n```\n\n```shell\n#允许低版本代码\nadb install -d test.apk\n```\n\n```shell\n#授予所有运行权限\nadb install -g test.apk\n```\n\n#### **adb install-multiple**\n\n一次安装多个apk文件  \n\n>*adb install-multiple [-lrtsdpg] <file...&gt;*  \n\n参数用法和`adb install`相同\n\n#### **adb uninstall**\n\n从设备中卸载app  \n\n>*adb uninstall [-k] <package&gt;*  \n\n参数 -k 表示保留缓存和数据\n\n```shell\nadb uninstall com.test.app\n```\n```shell\nadb uninstall -k com.test.app\n```\n\n#### **adb shell pm list packages**\n\n打印出设备安装的所有包信息，可选参数用于过滤要显示的包名  \n\n>*adb shell pm list packages [options] <FILTER&gt;*  \n\n```shell\nadb shell pm list packages\n```\n\n```shell\n#查看相关的文件\nadb shell pm list packages -f\n```\n\n```shell\n#只显示禁用的packages\nadb shell pm list packages -d\n```\n```shell\n# 只显示可用的packages\nadb shell pm list packages -e\n```\n```shell\n#只显示系统级别的packages\nadb shell pm list packages -s\n```\n```shell\n#只显示第三方的packages(非系统)\nadb shell pm list packages -3\n```\n```shell\n#查看安装器(比如google play)\nadb shell pm list packages -i\n```\n```shell\n# 包括卸载的packages\nadb shell pm list packages -u\n```\n```shell\n#查询用户空间\nadb shell pm list packages --user <USER_ID&gt;\n```\n\n#### **adb shell pm path**\n\n打印制定APK的路径  \n\n>*adb shell pm path &lt;PACKAGE&gt;*\n\n```shell\nadb shell pm path com.android.phone\n```\n\n返回结果\n\n```shell\npackage:/system/priv-app/TeleService/TeleService.apk\n```\n\n#### **adb shell pm clear**\n\n删除所有有关的数据  \n\n>*adb shell pm clear <PACKAGE&gt;*\n\n```shell\nadb shell pm clear com.test.abc\n```\n\n返回结果\n\n```shell\nclearing app data, cache\n```\n\n### **文件管理**\n\n#### **adb pull**\n\n从设备下载指定的文件到电脑\n\n> **adb pull &lt;remote&gt; [local]**\n\n```shell\n#下载 /sdcard/demo.mp4文件到 <android-sdk-path>/platform-tools 目录下\nadb pull /sdcard/demo.mp4\n```\n\n```shell\n#下载demo.mp4到 /Users/bsty/Desktop/\nadb pull /sdcard/demo.mp4 /Users/bsty/Desktop/\n```\n\n#### **adb push**\n\n从电脑上传指定文件到设备\n\n> **adb push &lt;local&gt; &lt;remote&gt;**\n\n```shell\n#复制 <android-sdk-path>/platform-tools/test.apk 到设备的 /sdcard目录下\nadb push test.apk /sdcard\n```\n\n```shell\n#复制 /Users/bsty/Desktop/test.apk 到 /sdcard 目录下\nadb push /Users/bsty/Desktop/test.apk /sdcard\n```\n\n#### **adb shell ls**\n\n列出目录类容\n\n> ** ls [option] &lt;directory&gt;**\n\n第一步.\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nls\n```\n\n```shell\n#显示隐藏的文件\nls -a \n```\n\n```shell\n#打印每个文件的序号\nls -i\n```\n\n```shell\n#以块的形式打印出每个文件的大小\nls -s\n```\n\n```shell\n#列出详细信息 UIDs和GIDs\nls -n\n```\n\n```shell\n#列出所有子目录(递归)\nls -R \n```\n\n**提示:** 按 Ctrl+C 终止\n\n#### **adb shell cd**\n\n切换目录\n\n> **cd &lt;directory&gt;**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\ncd /system\n```\n\n#### **adb shell rm**\n\n删除文件或者目录\n\n>**rm [option] &lt;files or directory&gt;**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\nrm /sdcard/test.txt\n\n```shell\n#不需要提示强制删除\nrm -f /sdcard/test.txt \n```\n\n```shell\n#删除所有子文件夹内容\nrm -r /sdcard/tmp\n```\n\n```shell\n#删除一个目录，即使不是空目录\nrm -d /sdcard/tmp\n```\n\n**提示：** rm -d 和rmdir命令相同\n\n```shell\n#在删除前会有提示信息\nrm -i /sdcard/test.txt\n```\n\n#### **adb shell mkdir**\n\n创建文件夹\n\n>**mkdir [options] &lt;directory name&gt;**\n\n```shell\nmkdir /sdcard/tmp\n```\n\n```shell\n#设置权限\nmkdir -m 777 /sdcard/tmp\n```\n\n```shell\n#当需要时创建父目录\nmkdir -p /sdcard/tmp/sub1/sub2\n```\n\n#### **adb shell touch**\n\n创建空文件或者修改文件的时间戳\n\n>**touch [options] &lt;file&gt;**\n\n第一步\n```shell\nadb shell\n```\n\n第二步\n\n```shell\ntouch /sdcard/tmp/test.txt\n```\n\nls /sdcard/tmp\n\n#### **adb pwd**\n\n打印当前目录的位置\n\n```shell\nadb shell\n\npwd\n```\n\n#### **adb shell cp**\n\n复制文件和目录\n\n>**cp [options] &lt;source&gt; &lt;dest&gt;**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\ncp /sdcard/test.txt /sdcard/demo.txt\n```\n\n#### **adb shell mv**\n\n移动或者重命名文件\n\n>**mv [options] &lt;source&gt; &lt;dest&gt;**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\n#移动\nmv /sdcard/tmp /system/tmp\n```\n\n```shell\n#重命名\nmv /sdcard/tmp /sdcard/test\n```\n\n### **网络**\n\n#### **adb shell netstat**\n\n网络统计\n\n>**netstat**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nnetstat\n```\n\n#### **adb shell ping**\n\n测试两个网络之间的连接和延迟\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nping www.google.com\n```\n\n#### **adb shell netcfg**\n\n通过配置文件管理和配置网络\n\n>**netcfg [&lt;interface&gt; {dhcplupdown}]**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nnetcfg\n```\n\n#### **adb shell ip**\n\n显示，处理路由，设备，策略路由和隧道\n\n>**ip [ OPTIONS ] OBJECT**\n\nOBJECT := { link | addr | addrlabel | route | rule | neigh | ntable |tunnel | tuntap | maddr | mroute | mrule | monitor | xfrm |netns | l2tp }\n\nOPTIONS := { -V[ersion] | -s[tatistics] | -d[etails] | -r[esolve] |-f[amily] { inet | inet6 | ipx | dnet | link } |-l[oops] { maximum-addr-flush-attempts } |-o[neline] | -t[imestamp] | -b[atch] [filename] |-rc[vbuf] [size]}\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\n#显示wifi IP地址\nip -f inet addr show wlan0\n```\n\n### **日志**\n\n#### **adb logcat**\n\n在屏幕上打印日志\n\n>**adb logcat [option] [filter-specs]**\n\n```shell\nadb logcat\n```\n\n>**提示:** 按 Ctrl-C 停止\n\n```shell\n#最低优先级，只显示Verbose级别的日志\nadb logcat *:V \n```\n\n```shell\n#只显示 Debug级别的日志\nadb logcat *:D \n```\n\n```shell\n#只显示 info 级别的日志\nadb logcat *:I \n```\n\n```shell\n#只显示Warning级别的日志\nadb logcat *:W\n```\n\n```shell\n#只显示Error级别的日志\nadb logcat *:E\n```\n\n```shell\n#只显示Fatal级别的日志\nadb logcat *:F\n```\n\n```shell\n# 最高优先级，没有打印过的日志\nadb logcat *:S \n```\n\n>adb logcat -b &lt;Buffer&gt;\n\n```shell\n#查看包含radio/telephony相关的消息缓冲区\nadb logcat -b radio\n```\n\n```shell\n# 包含事件相关的缓冲区\nadb logcat -b event\n```\n\n```shell\n#默认\nadb logcat -b main\n```\n\n```shell\n#清除整个日志并退出\nadb logcat -c\n```\n\n```shell\n#转储日志到屏幕并退出\nadb logcat -d\n```\n\n```shell\n#将日志信息写入test.logs文件\nadb logcat -f test.logs\n```\n\n```shell\n#打印指定日志buffer的大小并退出\nadb logcat -g \n```\n\n```shell\n#设置日志的最大数\nadb logcat -n <count>\n```\n\n>**提示：** 默认的值是4. 需要 -r 参数\n\n```shell\n#Rotates the log file every <kbytes> of output\nadb logcat -r <kbytes>\n```\n\n>**提示：** 默认值为16， 需要-f参数\n\n```shell\n#设置默认 过滤器为 silent\nadb logcat -s \n```\n\n>**adb logcat -v &lt;format&gt;**\n\n```shell\n# 显示优先级/标签并在过程中发出消息（默认格式）的PID。\nadb logcat -v brief\n```\n\n```shell\n# 只显示 PID\nadb logcat -v process\n```\n\n```shell\n#只显示优先级和标签\nadb logcat -v tag\n```\n\n```shell\n#显示原始日志信息，没有其他数据字段\nadb logcat -v raw\n```\n\n```shell\n#显示日期，调用时，优先级/标签，进程发出消息的PID。\nadb logcat -v time\n```\n\n```shell\n#显示日期，调用时间，优先级，标记，和该线程发出消息的PID和TID\nadb logcat -v threadtime\n```\n\n```shell\n#显示所有元数据字段和空行分开的消息\nadb logcat -v long\n```\n\n#### **adb shell dumpsys**\n\n转储系统数据\n\n>**adb shell dumpsys [options]**\n\n```shell\nadb shell dumpsys\n```\n\n```shell\nadb shell dumpsys battery\n```\n\n```shell\n#搜集设备的电池信息\nadb shell dumpsys batterystats\n```\n\n```shell\n#清除旧信息\nadb shell dumpsys batterystats -reset \n```\n\n#### **adb shell dumpstate**\n\n转储状态\n\n```shell\nadb shell dumpstate\n```\n\n```shell\n#转储信息存到一个文件\nadb shell dumpstate > state.logs\n```\n\n### **截屏**\n\n#### **adb shell screencap**\n\n>**adb shell screencap &lt;filename&gt;**\n\n```shell\nadb shell screencap /sdcard/screen.png\n```\n\n从设备下载一个文件\n\n```shell\nadb pull /sdcard/screen.png\n```\n\n#### **adb shell screenrecord**\n\n录制屏幕，android4.4(api 19)以上可用\n\n>**adb shell screenrecord [options] &lt;filename&gt;**\n\n```shell\nadb shell screenrecord /sdcard/demo.mp4\n```\n\n(按 Ctrl-C停止录屏)\n\n从设备下载该录像文件\n\n```shell\nadb pull /sdcard/demo.mp4\n```\n\n>**提示：**按Ctrl-C停止录屏，默认3分钟自动停止，也可以添加参数 --time-limit 设置录制时间\n\n```shell\n#设置视频大小：1280*720. 默认为设备分辨率，最好使用设备支持的分辨率\nadb shell screenrecord --size <WIDTH*HEIGHT>\n```\n\n```shell\n#设置视频的bit比，默认4Mbps，可以增加比例提升视频清晰度，但是也会增大文件大小,\n#例子: bit比为5Mbps， *** adb shell screenrecord --bit-rate 5000000 /sdcard/demo.mp4\nadb shell screenrecord --bit-rate <RATE>\n```\n\n```shell\n#设置最长（秒），默认为180秒（3分钟）\nadb shell screenrecord --time-limit <TIME>\n```\n\n```shell\n#旋转输出90度。实验性功能\nadb shell screenrecord --rotate\n```\n\n```shell\n#控制台显示日志信息，如果没有设置该参数，不会在录屏是显示任何信息\nadb shell screenrecord --verbose\n```\n\n### **系统**\n\n#### **adb root**\n\n以root权限重新启动adbd守护进程\n\n```shell\nadb root\n```\n\n>**注意：**在生产环境中adbd不能以root模式执行,只能用于测试\n\n#### **adb sideload**\n\n恢复Andr​​oid update.zip包。\n\n```shell\nadb sideload <upload.zip>\n```\n\n#### **adb shell ps**\n\n打印进程状态信息\n\n>**ps [options]**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nps\n```\n\nps -p\n\n#### **adb shell top**\n\n显示顶层的cpu进程\n\n>**top [options]**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\ntop\n```\n\n>**提示：** 按Ctrl-C停止**\n\n```shell\n#以线程形式展示\ntop -t \n```\n\n#### **adb shell getprop**\n\n通过property service获取设备属性\n\n>**getprop [options]**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\ngetprop\n\ngetprop ro.build.version.sdk\n\ngetprop  ro.chipname\n\ngetprop | grep adb \n\n```\n\n#### **adb shell setprop**\n\n设置property service\n\n>**setprop &lt;key&gt; &lt;value&gt;\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nsetprop service.adb.tcp.prot 5555\n```\n\n","source":"_posts/ADB Shell.md","raw":"---\ntitle: ADB Shell\ndate: 2016-07-09 \ntags:\n---\n\n# ADB Shell 学习\n\n> 又是一个周末了,最怕闲来无事的周末，于是给自己找点事情做，ADB shell这一块一直没有系统的学习，正好趁此机会学习。\n\n主要通过[学习资料](http://adbshell.com/commands)和adb --help文档学习\n\n### 怎么使用ADB shell命令\n\n首先找到Andorid的SDK安装路径或者单独安装ADB组件，sdk中adb路径在<Android SDK&gt;platform-tools 文件夹下。\n\n**Windows下**\n\n```shell\ncd <adb-path>\n#执行adb命令\nadb shell\n```\n\n**Mac下**\n\n```shell\n#配置adb环境变量\nvi ~/.bash_profile\n#编辑该文件，添加你的adb路径\nexport ADB_PATH= your_adb_path\nexport PATH=${PATH}:${ADB_PATH}\n\n#退出保存再执行命令使得环境变量生效\nsource .bash_profile\n```\n\n### **ADB Debugging命令**\n\n#### **adb devices**\n\n列出连接的设备  \n\n>*adb devices [-l]* '-l'\n\n参数用于指定需要列出的设备\n\n```shell\n#打印连接的设备\nadb devices\n```\n\n返回结果\n\n```shell\n#执行命令返回设备的序列数字和状态\n2b70fc6a        device\n```\n\n#### **adb forward**\n\n重定向连接,需要开启设备的USB debugging模式  \n\n>*adb forward &lt;local&gt; &lt;remote&gt;*   \n *adb froward --no-rebind &lt;local&gt; &lt;remote&gt;*     \n  \n作用同上，但是如果已经连接就会失败  \n\n>*adb forward --remove &lt;local&gt;*\n\n删除指定连接的设备  \n\n>*adb forward --remove-all*\n\n\n```shell\n#映射本地的8000端口到设备的端口9000\nadb forward tcp:8000 tcp:9000\n```\n\n#### **adb kill-server**\n\n终止adb服务进程  如果服务在运行则终止\n\n```shell\nadb kill-server\n```\n\n### **无线连接命令**\n\n#### **adb connect**\n\n> 通过WIFI使用ADB  \n\n*adb connect &lt;host&gt; [:&lt;port&gt;]*\n\n*第一步* 通过USB连接设备\n\n*第二步* 使用命令查看连接的设备\n\n```shell\nadb devices\n```\n\n **注意：** 以上步骤不可忽略\n\n*第三步* 以TCP模式重启端口：5555\n\n*第四步* 查看Android设备的IP地址：设置-&gt;关于手机-&gt;状态-&gt;IP地址，将该IP地址以 #.#.#.# 的格式记录下来\n\n*第五步* 执行命令\n\n```shell\n#   #.#.#.# 为刚刚记录下来的ip地址\nadb connect #.#.#.#\n```\n\n*第六步* 拔掉usb连接线，确认设备是否依然可连接\n\n```shell\nadb devices\n```\n\n返回结果\n\n```shell\n#.#.#.#:5555 device\n```\n\n> **注意**: 确保本地和设备连接的wifi为可访问的同一个局域网\n\n#### **adb disconnect**\n\n断开通过TCP/IP连接的设备  \n\n>*adb disconnect [&lt;host&gt; [:&lt;port&gt;]]*  \n\n不带参数则断开所有TCP/IP连接的设备\n\n#### **adb usb**\n\n重启USB模式的 ADB\n\n```shell\nadb usb\n```\n\n### **App包的管理命令**\n\n#### **adb install**\n\n安装Android应用到设备，需要指定需要安装的 .apk 文件的全路径  \n\n>*adb install [option] <path&gt;*\n\n\n```shell\nadb install test.apk\n```\n\n```shell\n# 给apk上锁，发布 apk 到 android market上时，可以设置相关标志位来保护你的 app。\nadb install -l test.apk\n```\n```shell\n# 重新安装apk\nadb install -r test.apk\n```\n\n```shell\n# 允许测试\nadb install -t test.apk\n```\n\n```shell\n# 在sdcard上安装\nadb install -s test.apk\n```\n\n```shell\n#允许低版本代码\nadb install -d test.apk\n```\n\n```shell\n#授予所有运行权限\nadb install -g test.apk\n```\n\n#### **adb install-multiple**\n\n一次安装多个apk文件  \n\n>*adb install-multiple [-lrtsdpg] <file...&gt;*  \n\n参数用法和`adb install`相同\n\n#### **adb uninstall**\n\n从设备中卸载app  \n\n>*adb uninstall [-k] <package&gt;*  \n\n参数 -k 表示保留缓存和数据\n\n```shell\nadb uninstall com.test.app\n```\n```shell\nadb uninstall -k com.test.app\n```\n\n#### **adb shell pm list packages**\n\n打印出设备安装的所有包信息，可选参数用于过滤要显示的包名  \n\n>*adb shell pm list packages [options] <FILTER&gt;*  \n\n```shell\nadb shell pm list packages\n```\n\n```shell\n#查看相关的文件\nadb shell pm list packages -f\n```\n\n```shell\n#只显示禁用的packages\nadb shell pm list packages -d\n```\n```shell\n# 只显示可用的packages\nadb shell pm list packages -e\n```\n```shell\n#只显示系统级别的packages\nadb shell pm list packages -s\n```\n```shell\n#只显示第三方的packages(非系统)\nadb shell pm list packages -3\n```\n```shell\n#查看安装器(比如google play)\nadb shell pm list packages -i\n```\n```shell\n# 包括卸载的packages\nadb shell pm list packages -u\n```\n```shell\n#查询用户空间\nadb shell pm list packages --user <USER_ID&gt;\n```\n\n#### **adb shell pm path**\n\n打印制定APK的路径  \n\n>*adb shell pm path &lt;PACKAGE&gt;*\n\n```shell\nadb shell pm path com.android.phone\n```\n\n返回结果\n\n```shell\npackage:/system/priv-app/TeleService/TeleService.apk\n```\n\n#### **adb shell pm clear**\n\n删除所有有关的数据  \n\n>*adb shell pm clear <PACKAGE&gt;*\n\n```shell\nadb shell pm clear com.test.abc\n```\n\n返回结果\n\n```shell\nclearing app data, cache\n```\n\n### **文件管理**\n\n#### **adb pull**\n\n从设备下载指定的文件到电脑\n\n> **adb pull &lt;remote&gt; [local]**\n\n```shell\n#下载 /sdcard/demo.mp4文件到 <android-sdk-path>/platform-tools 目录下\nadb pull /sdcard/demo.mp4\n```\n\n```shell\n#下载demo.mp4到 /Users/bsty/Desktop/\nadb pull /sdcard/demo.mp4 /Users/bsty/Desktop/\n```\n\n#### **adb push**\n\n从电脑上传指定文件到设备\n\n> **adb push &lt;local&gt; &lt;remote&gt;**\n\n```shell\n#复制 <android-sdk-path>/platform-tools/test.apk 到设备的 /sdcard目录下\nadb push test.apk /sdcard\n```\n\n```shell\n#复制 /Users/bsty/Desktop/test.apk 到 /sdcard 目录下\nadb push /Users/bsty/Desktop/test.apk /sdcard\n```\n\n#### **adb shell ls**\n\n列出目录类容\n\n> ** ls [option] &lt;directory&gt;**\n\n第一步.\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nls\n```\n\n```shell\n#显示隐藏的文件\nls -a \n```\n\n```shell\n#打印每个文件的序号\nls -i\n```\n\n```shell\n#以块的形式打印出每个文件的大小\nls -s\n```\n\n```shell\n#列出详细信息 UIDs和GIDs\nls -n\n```\n\n```shell\n#列出所有子目录(递归)\nls -R \n```\n\n**提示:** 按 Ctrl+C 终止\n\n#### **adb shell cd**\n\n切换目录\n\n> **cd &lt;directory&gt;**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\ncd /system\n```\n\n#### **adb shell rm**\n\n删除文件或者目录\n\n>**rm [option] &lt;files or directory&gt;**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\nrm /sdcard/test.txt\n\n```shell\n#不需要提示强制删除\nrm -f /sdcard/test.txt \n```\n\n```shell\n#删除所有子文件夹内容\nrm -r /sdcard/tmp\n```\n\n```shell\n#删除一个目录，即使不是空目录\nrm -d /sdcard/tmp\n```\n\n**提示：** rm -d 和rmdir命令相同\n\n```shell\n#在删除前会有提示信息\nrm -i /sdcard/test.txt\n```\n\n#### **adb shell mkdir**\n\n创建文件夹\n\n>**mkdir [options] &lt;directory name&gt;**\n\n```shell\nmkdir /sdcard/tmp\n```\n\n```shell\n#设置权限\nmkdir -m 777 /sdcard/tmp\n```\n\n```shell\n#当需要时创建父目录\nmkdir -p /sdcard/tmp/sub1/sub2\n```\n\n#### **adb shell touch**\n\n创建空文件或者修改文件的时间戳\n\n>**touch [options] &lt;file&gt;**\n\n第一步\n```shell\nadb shell\n```\n\n第二步\n\n```shell\ntouch /sdcard/tmp/test.txt\n```\n\nls /sdcard/tmp\n\n#### **adb pwd**\n\n打印当前目录的位置\n\n```shell\nadb shell\n\npwd\n```\n\n#### **adb shell cp**\n\n复制文件和目录\n\n>**cp [options] &lt;source&gt; &lt;dest&gt;**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\ncp /sdcard/test.txt /sdcard/demo.txt\n```\n\n#### **adb shell mv**\n\n移动或者重命名文件\n\n>**mv [options] &lt;source&gt; &lt;dest&gt;**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\n#移动\nmv /sdcard/tmp /system/tmp\n```\n\n```shell\n#重命名\nmv /sdcard/tmp /sdcard/test\n```\n\n### **网络**\n\n#### **adb shell netstat**\n\n网络统计\n\n>**netstat**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nnetstat\n```\n\n#### **adb shell ping**\n\n测试两个网络之间的连接和延迟\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nping www.google.com\n```\n\n#### **adb shell netcfg**\n\n通过配置文件管理和配置网络\n\n>**netcfg [&lt;interface&gt; {dhcplupdown}]**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nnetcfg\n```\n\n#### **adb shell ip**\n\n显示，处理路由，设备，策略路由和隧道\n\n>**ip [ OPTIONS ] OBJECT**\n\nOBJECT := { link | addr | addrlabel | route | rule | neigh | ntable |tunnel | tuntap | maddr | mroute | mrule | monitor | xfrm |netns | l2tp }\n\nOPTIONS := { -V[ersion] | -s[tatistics] | -d[etails] | -r[esolve] |-f[amily] { inet | inet6 | ipx | dnet | link } |-l[oops] { maximum-addr-flush-attempts } |-o[neline] | -t[imestamp] | -b[atch] [filename] |-rc[vbuf] [size]}\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\n#显示wifi IP地址\nip -f inet addr show wlan0\n```\n\n### **日志**\n\n#### **adb logcat**\n\n在屏幕上打印日志\n\n>**adb logcat [option] [filter-specs]**\n\n```shell\nadb logcat\n```\n\n>**提示:** 按 Ctrl-C 停止\n\n```shell\n#最低优先级，只显示Verbose级别的日志\nadb logcat *:V \n```\n\n```shell\n#只显示 Debug级别的日志\nadb logcat *:D \n```\n\n```shell\n#只显示 info 级别的日志\nadb logcat *:I \n```\n\n```shell\n#只显示Warning级别的日志\nadb logcat *:W\n```\n\n```shell\n#只显示Error级别的日志\nadb logcat *:E\n```\n\n```shell\n#只显示Fatal级别的日志\nadb logcat *:F\n```\n\n```shell\n# 最高优先级，没有打印过的日志\nadb logcat *:S \n```\n\n>adb logcat -b &lt;Buffer&gt;\n\n```shell\n#查看包含radio/telephony相关的消息缓冲区\nadb logcat -b radio\n```\n\n```shell\n# 包含事件相关的缓冲区\nadb logcat -b event\n```\n\n```shell\n#默认\nadb logcat -b main\n```\n\n```shell\n#清除整个日志并退出\nadb logcat -c\n```\n\n```shell\n#转储日志到屏幕并退出\nadb logcat -d\n```\n\n```shell\n#将日志信息写入test.logs文件\nadb logcat -f test.logs\n```\n\n```shell\n#打印指定日志buffer的大小并退出\nadb logcat -g \n```\n\n```shell\n#设置日志的最大数\nadb logcat -n <count>\n```\n\n>**提示：** 默认的值是4. 需要 -r 参数\n\n```shell\n#Rotates the log file every <kbytes> of output\nadb logcat -r <kbytes>\n```\n\n>**提示：** 默认值为16， 需要-f参数\n\n```shell\n#设置默认 过滤器为 silent\nadb logcat -s \n```\n\n>**adb logcat -v &lt;format&gt;**\n\n```shell\n# 显示优先级/标签并在过程中发出消息（默认格式）的PID。\nadb logcat -v brief\n```\n\n```shell\n# 只显示 PID\nadb logcat -v process\n```\n\n```shell\n#只显示优先级和标签\nadb logcat -v tag\n```\n\n```shell\n#显示原始日志信息，没有其他数据字段\nadb logcat -v raw\n```\n\n```shell\n#显示日期，调用时，优先级/标签，进程发出消息的PID。\nadb logcat -v time\n```\n\n```shell\n#显示日期，调用时间，优先级，标记，和该线程发出消息的PID和TID\nadb logcat -v threadtime\n```\n\n```shell\n#显示所有元数据字段和空行分开的消息\nadb logcat -v long\n```\n\n#### **adb shell dumpsys**\n\n转储系统数据\n\n>**adb shell dumpsys [options]**\n\n```shell\nadb shell dumpsys\n```\n\n```shell\nadb shell dumpsys battery\n```\n\n```shell\n#搜集设备的电池信息\nadb shell dumpsys batterystats\n```\n\n```shell\n#清除旧信息\nadb shell dumpsys batterystats -reset \n```\n\n#### **adb shell dumpstate**\n\n转储状态\n\n```shell\nadb shell dumpstate\n```\n\n```shell\n#转储信息存到一个文件\nadb shell dumpstate > state.logs\n```\n\n### **截屏**\n\n#### **adb shell screencap**\n\n>**adb shell screencap &lt;filename&gt;**\n\n```shell\nadb shell screencap /sdcard/screen.png\n```\n\n从设备下载一个文件\n\n```shell\nadb pull /sdcard/screen.png\n```\n\n#### **adb shell screenrecord**\n\n录制屏幕，android4.4(api 19)以上可用\n\n>**adb shell screenrecord [options] &lt;filename&gt;**\n\n```shell\nadb shell screenrecord /sdcard/demo.mp4\n```\n\n(按 Ctrl-C停止录屏)\n\n从设备下载该录像文件\n\n```shell\nadb pull /sdcard/demo.mp4\n```\n\n>**提示：**按Ctrl-C停止录屏，默认3分钟自动停止，也可以添加参数 --time-limit 设置录制时间\n\n```shell\n#设置视频大小：1280*720. 默认为设备分辨率，最好使用设备支持的分辨率\nadb shell screenrecord --size <WIDTH*HEIGHT>\n```\n\n```shell\n#设置视频的bit比，默认4Mbps，可以增加比例提升视频清晰度，但是也会增大文件大小,\n#例子: bit比为5Mbps， *** adb shell screenrecord --bit-rate 5000000 /sdcard/demo.mp4\nadb shell screenrecord --bit-rate <RATE>\n```\n\n```shell\n#设置最长（秒），默认为180秒（3分钟）\nadb shell screenrecord --time-limit <TIME>\n```\n\n```shell\n#旋转输出90度。实验性功能\nadb shell screenrecord --rotate\n```\n\n```shell\n#控制台显示日志信息，如果没有设置该参数，不会在录屏是显示任何信息\nadb shell screenrecord --verbose\n```\n\n### **系统**\n\n#### **adb root**\n\n以root权限重新启动adbd守护进程\n\n```shell\nadb root\n```\n\n>**注意：**在生产环境中adbd不能以root模式执行,只能用于测试\n\n#### **adb sideload**\n\n恢复Andr​​oid update.zip包。\n\n```shell\nadb sideload <upload.zip>\n```\n\n#### **adb shell ps**\n\n打印进程状态信息\n\n>**ps [options]**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nps\n```\n\nps -p\n\n#### **adb shell top**\n\n显示顶层的cpu进程\n\n>**top [options]**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\ntop\n```\n\n>**提示：** 按Ctrl-C停止**\n\n```shell\n#以线程形式展示\ntop -t \n```\n\n#### **adb shell getprop**\n\n通过property service获取设备属性\n\n>**getprop [options]**\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\ngetprop\n\ngetprop ro.build.version.sdk\n\ngetprop  ro.chipname\n\ngetprop | grep adb \n\n```\n\n#### **adb shell setprop**\n\n设置property service\n\n>**setprop &lt;key&gt; &lt;value&gt;\n\n第一步\n\n```shell\nadb shell\n```\n\n第二步\n\n```shell\nsetprop service.adb.tcp.prot 5555\n```\n\n","slug":"ADB Shell","published":1,"updated":"2018-04-06T05:04:50.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqdv0004tekrgo9o1fyn"},{"title":"Okhttp文档一","date":"2016-06-30T16:00:00.000Z","_content":"\n## 配置\n\n权限设置\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n添加依赖到app/build.gradle文件:\n\n```gradle\ncompile 'com.squareup.okhttp3:okhttp:3.3.0'\n```\n\n## 发送和接收网络请求\n\n首先，必须实例化一个OKHttpClient并且创建一个Request对象：\n\n```java\n//should be a singleton\nOkHttpClient client = new OKHttpClient();\n\nRequest request = new Request.Builder()\n                        .url(\"http://publicobject.com/helloworld.txt\")\n                        .build();\n```\n\n如果需要请求参数，那么OKHttp中HttpUrl类提供构造方法构造URL：\n\n```java\n    HttpUrl.Builder urlBuilder = HttpUrl.parse(\"https://ajax.googleapis.com/ajax/services/search/images\").newBuilder();\n    urlBuilder.addQueryParameter(\"v\", \"1.0\");\n    urlBuilder.addQueryParameter(\"q\", \"android\");\n    urlBuilder.addQueryParameter(\"rsz\", \"8\");\n    String url = urlBuilder.build().toString();\n\n    Request request = new Request.Builder()\n                            .url(url)\n                            .build();\n```\n\n认证参数和headers也可以添加到请求：\n\n```java\nRequest request = new Request.Builder()\n        .header(\"Authorization\",\"token abcd\")\n        .url(\"https://api.github.com/users/codepath\")\n        .build();\n```\n\n## 同步网络调用\n\n我们可以创建一个Call对象并且同步调度网络请求：\n\n```java\nResponse response = client.newCall(request).execute();\n```\n\n因为android不允许网络在主线程中请求网络，只能在子线程或者后台进程中同步请求，在轻量级的网络请求中也可以使用AsyncTask.\n\n## 异步网络请求\n\n我们也可以创建一个Call对象发起异步网络请求，使用enqueue()方法，并且通过匿名回调对象，实现onFailure()方法和onResponse()方法。\n\n```java\n//Get a handler that can be used to post to the main thread\nclient.newCall(request).enqueue(new Callback(){\n    @override\n    public void onFailure(Call call, IOException e){\n        e.printStackTrace();\n    }\n\n    @Override\n    public void onResponse(Call call, final Response response) throws IOException{\n        if(!response.isSuccessful()){\n            throw new IOException(\"Unexpected code  \"+ response);\n        }\n    }\n});\n```\n\n如果需要更新UI，可以使用 runOnUiThread()或者post结果到主线程.\n\n```java\nclient.newCall(request).enqueue(new Callback(){\n    @override\n    public void onResponse(Call call, final Response response) throws IOExcepiton{\n        // ... check for failure using `isSuccessful` before proceeding\n\n        // Read data on the worker thread\n        final String responseData = response.body().string();\n\n        // Run view-related code back on the main thread\n        MainActivity.this.runOnUiThread(new Runnable(){\n            @Override\n            public void run(){\n                try{\n                    TextView myTextView = (TextView) findViewById(R.id.myTextView);\n                    myTextView.setText(responseData);\n                }catch(IOException e){\n                    e.printStackTrace();\n                }\n     }\n        })\n    }\n});\n```\n\n## 处理网络响应\n\n如果请求没有被取消并且没有连接问题， onResponse()方法将会执行，通过response对象可以检测状态码，返回响应体，头。如果返回码是2开头的则调用isSuccessful()方法，如 200,201等。\n\n```java\nif(!response.isSuccessful()){\n    throw new IOException(\"Unexpected code\" + response);\n}\n```\n\n响应头将提供一个列表\n\n```java\nHeaders responseHeaders = response.headers();\nfor(int i = 0; i<responseHeaders.size();i++){\n    Log.d(\"DEBUG\",responseHeaders.name[i]+\": \" + responseHeaders.value(i));\n}\n```\n\n头也可以直接通过response.header()获取\n\n```java\nString  header = response.header(\"Date\");\n```\n\n也可以通过调用response.body()获取响应数据，然后调用string()方法。response.body()只能执行一次并且需要在后台进程执行。\n\n```java\nLog.d(\"DEBUG\", response.body().string());\n```\n\n## 处理JSON数据\n\n假设我们调用GitHub API，返回基于JSON的数据：\n\n```java\nRequest request = new Request.Builder()\n            .url(\"https://api.github.com/users/codepath\")\n            .build();\n```\n\n也可以通过转换成JSONObject或者JSONArray解析响应数据：\n\n```java\nclient.newCall(request).enqueue(new Callback(){\n    @Override\n    public void onResponse(Call call, final Response response) throws IOException{\n        try{\n            String responseData = response.body().string();\n            JSONObject json = new JSONObject(responseData);\n            final String owner = json.getString(\"name\");\n        } catch(JSONException e){\n\n        }\n    }\n})\n```\n\n## 使用GSON处理JSON\n\n响应体的string()方法将为加载整个数据到内存中。为了使内存使用更高性能，使用charStream()方法将响应转换成流。\n\n使用Gson库，必须根据响应的JSON先定义一个类\n\n```java\nstatic class GitUser{\n    String name;\n    String url;\n    int id;\n}\n```\n\n然后使用Gson解析器将数据直接转换成java类：\n\n```java\n// Create new gson object\nfinal Gson gson = new Gson();\n//Get a handler that can be used to post to the main thread\nclient.newCall(request).enqueue(new Callback(){\n    //Parse response using gson deserializer\n    @Override\n    public void onResponse(Call call, final Response response) throws IOExcepiton{\n    //Process the data on the worker thread\n        GitUser user = gson.fromJson(rsesponse.body().charStream(), GitUser.class)\n        //Access deserialized user object here\n    }\n})\n```\n\n## 发送认证请求\n\nOkHttp有一个用来修改使用拦截出站请求的机制,一个常见的用例是OAuth协议，这需要请求使用私钥签名,该OkHttp路标库与库路标工程使用拦截签署每个请求。通过这种方式，调用者不需要记住签署每个请求：\n\n```java\nOkHttpOAuthConsumer consumer = new OkHttpOAuthConsumer(CONSUMER_KEY, CONSUMER_SECRET);\nconsumer.setTokenWithSecret(token, secret);\nokHttpClient.interceptors().add(new SigningInterceptor(consumer));\n```\n\n## 缓存网络响应\n\n可以通过创建OkHttpClient时设置网络缓存：\n\n```java\nint cacheSize = 10*1024*1024; //10MiB\nCache cache = new Cache(getApplication().getCacheDir(), cacheSize);\nOkHttpClient client = new OkHttpClient.Builder().cache(cache).build();\n```\n\n可以通过设置cacheControl属性控制是否取回响应的缓存，例如：假如只想在数据缓存中取回请求，可以如下构建Request:\n\n```java\nRequest request = new Request.Builder()\n                    .url()\n                    .cacheControl(new CacheControl.Builder().onlyIfCached().build())\n                    .build();\n```\n\n也可以通过使用noCache()强制网络响应:\n\n```java\n.cacheControl(new CacheControl.Builder().noCache().build())\n```\n\n也可以指定最大缓存时间：\n\n```java\n.cacheControl(new CacheContorl.Builder().maxStale(365,TimeUnit.DAYS).build())\n```\n\n为了取回缓存的响应，可以简单的调用cacheResponse()：\n\n```java\nCall call = client.newCall(request);\ncall.enqueue(new Callback(){\n    @Override\n    public void onFailure(Call call, IOException e){\n\n    }\n    @Override\n    public void onResponse(Call call, final Response response) throws IOException{\n        final Response text = response.cacheResponse();\n        if(text!=null){\n            Log.d(\"here\", text.toString());\n        }\n    }\n})\n```\n\n## 故障排除\n\nOkHttp可以努力试着在抽象的库中各个层时一步步排除故障。\n\n## HttpLog拦截器\n\n添加HttpLogInterceptor到依赖\n\n```gradle\ncompile 'com.squareup.okhttp3:loging-interceptor:3.3.0'\n```\n\n你需要给HttpLogInterceptor添加网络拦截器:\n\n```java\nOkHttpClient.Builder builder = new OkHttpClient.Builder();\n\nHttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();\n/ Can be Level.BASIC, Level.HEADERS, or Level.BODY\n// See http://square.github.io/okhttp/3.x/logging-interceptor/ to see the     options.\n\nhttpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);\nbuilder.networkInterceptors().add(httpLoggingInterceptor);\nbuilder.build();\n```\n\n## Stetho\n\n用chrome访问网络时需要使用Facebook的Stetho插件 添加gradle配置\n\n```gradle\ndependencies{\n    compile 'com.facebook.stetho:stetho-okhttp3:1.3.0'\n}\n```\n\n当实例化OkHttp时，确保通过StethoInterceptor\n\n```java\nOkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new SethoInterceptor())\n    .build();\n```\n\n最后，确保在Application里初始化了Stetho\n\n```java\npublic class MyApplication extends Application{\n    public void onCreate(){\n        super.onCreate();\n        Stetho.initializeWithDefaults(this);\n    }\n}\n```\n","source":"_posts/Okhttp文档一.md","raw":"---\ntitle: Okhttp文档一\ndate: 2016-07-01 \ntags:\n---\n\n## 配置\n\n权限设置\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n添加依赖到app/build.gradle文件:\n\n```gradle\ncompile 'com.squareup.okhttp3:okhttp:3.3.0'\n```\n\n## 发送和接收网络请求\n\n首先，必须实例化一个OKHttpClient并且创建一个Request对象：\n\n```java\n//should be a singleton\nOkHttpClient client = new OKHttpClient();\n\nRequest request = new Request.Builder()\n                        .url(\"http://publicobject.com/helloworld.txt\")\n                        .build();\n```\n\n如果需要请求参数，那么OKHttp中HttpUrl类提供构造方法构造URL：\n\n```java\n    HttpUrl.Builder urlBuilder = HttpUrl.parse(\"https://ajax.googleapis.com/ajax/services/search/images\").newBuilder();\n    urlBuilder.addQueryParameter(\"v\", \"1.0\");\n    urlBuilder.addQueryParameter(\"q\", \"android\");\n    urlBuilder.addQueryParameter(\"rsz\", \"8\");\n    String url = urlBuilder.build().toString();\n\n    Request request = new Request.Builder()\n                            .url(url)\n                            .build();\n```\n\n认证参数和headers也可以添加到请求：\n\n```java\nRequest request = new Request.Builder()\n        .header(\"Authorization\",\"token abcd\")\n        .url(\"https://api.github.com/users/codepath\")\n        .build();\n```\n\n## 同步网络调用\n\n我们可以创建一个Call对象并且同步调度网络请求：\n\n```java\nResponse response = client.newCall(request).execute();\n```\n\n因为android不允许网络在主线程中请求网络，只能在子线程或者后台进程中同步请求，在轻量级的网络请求中也可以使用AsyncTask.\n\n## 异步网络请求\n\n我们也可以创建一个Call对象发起异步网络请求，使用enqueue()方法，并且通过匿名回调对象，实现onFailure()方法和onResponse()方法。\n\n```java\n//Get a handler that can be used to post to the main thread\nclient.newCall(request).enqueue(new Callback(){\n    @override\n    public void onFailure(Call call, IOException e){\n        e.printStackTrace();\n    }\n\n    @Override\n    public void onResponse(Call call, final Response response) throws IOException{\n        if(!response.isSuccessful()){\n            throw new IOException(\"Unexpected code  \"+ response);\n        }\n    }\n});\n```\n\n如果需要更新UI，可以使用 runOnUiThread()或者post结果到主线程.\n\n```java\nclient.newCall(request).enqueue(new Callback(){\n    @override\n    public void onResponse(Call call, final Response response) throws IOExcepiton{\n        // ... check for failure using `isSuccessful` before proceeding\n\n        // Read data on the worker thread\n        final String responseData = response.body().string();\n\n        // Run view-related code back on the main thread\n        MainActivity.this.runOnUiThread(new Runnable(){\n            @Override\n            public void run(){\n                try{\n                    TextView myTextView = (TextView) findViewById(R.id.myTextView);\n                    myTextView.setText(responseData);\n                }catch(IOException e){\n                    e.printStackTrace();\n                }\n     }\n        })\n    }\n});\n```\n\n## 处理网络响应\n\n如果请求没有被取消并且没有连接问题， onResponse()方法将会执行，通过response对象可以检测状态码，返回响应体，头。如果返回码是2开头的则调用isSuccessful()方法，如 200,201等。\n\n```java\nif(!response.isSuccessful()){\n    throw new IOException(\"Unexpected code\" + response);\n}\n```\n\n响应头将提供一个列表\n\n```java\nHeaders responseHeaders = response.headers();\nfor(int i = 0; i<responseHeaders.size();i++){\n    Log.d(\"DEBUG\",responseHeaders.name[i]+\": \" + responseHeaders.value(i));\n}\n```\n\n头也可以直接通过response.header()获取\n\n```java\nString  header = response.header(\"Date\");\n```\n\n也可以通过调用response.body()获取响应数据，然后调用string()方法。response.body()只能执行一次并且需要在后台进程执行。\n\n```java\nLog.d(\"DEBUG\", response.body().string());\n```\n\n## 处理JSON数据\n\n假设我们调用GitHub API，返回基于JSON的数据：\n\n```java\nRequest request = new Request.Builder()\n            .url(\"https://api.github.com/users/codepath\")\n            .build();\n```\n\n也可以通过转换成JSONObject或者JSONArray解析响应数据：\n\n```java\nclient.newCall(request).enqueue(new Callback(){\n    @Override\n    public void onResponse(Call call, final Response response) throws IOException{\n        try{\n            String responseData = response.body().string();\n            JSONObject json = new JSONObject(responseData);\n            final String owner = json.getString(\"name\");\n        } catch(JSONException e){\n\n        }\n    }\n})\n```\n\n## 使用GSON处理JSON\n\n响应体的string()方法将为加载整个数据到内存中。为了使内存使用更高性能，使用charStream()方法将响应转换成流。\n\n使用Gson库，必须根据响应的JSON先定义一个类\n\n```java\nstatic class GitUser{\n    String name;\n    String url;\n    int id;\n}\n```\n\n然后使用Gson解析器将数据直接转换成java类：\n\n```java\n// Create new gson object\nfinal Gson gson = new Gson();\n//Get a handler that can be used to post to the main thread\nclient.newCall(request).enqueue(new Callback(){\n    //Parse response using gson deserializer\n    @Override\n    public void onResponse(Call call, final Response response) throws IOExcepiton{\n    //Process the data on the worker thread\n        GitUser user = gson.fromJson(rsesponse.body().charStream(), GitUser.class)\n        //Access deserialized user object here\n    }\n})\n```\n\n## 发送认证请求\n\nOkHttp有一个用来修改使用拦截出站请求的机制,一个常见的用例是OAuth协议，这需要请求使用私钥签名,该OkHttp路标库与库路标工程使用拦截签署每个请求。通过这种方式，调用者不需要记住签署每个请求：\n\n```java\nOkHttpOAuthConsumer consumer = new OkHttpOAuthConsumer(CONSUMER_KEY, CONSUMER_SECRET);\nconsumer.setTokenWithSecret(token, secret);\nokHttpClient.interceptors().add(new SigningInterceptor(consumer));\n```\n\n## 缓存网络响应\n\n可以通过创建OkHttpClient时设置网络缓存：\n\n```java\nint cacheSize = 10*1024*1024; //10MiB\nCache cache = new Cache(getApplication().getCacheDir(), cacheSize);\nOkHttpClient client = new OkHttpClient.Builder().cache(cache).build();\n```\n\n可以通过设置cacheControl属性控制是否取回响应的缓存，例如：假如只想在数据缓存中取回请求，可以如下构建Request:\n\n```java\nRequest request = new Request.Builder()\n                    .url()\n                    .cacheControl(new CacheControl.Builder().onlyIfCached().build())\n                    .build();\n```\n\n也可以通过使用noCache()强制网络响应:\n\n```java\n.cacheControl(new CacheControl.Builder().noCache().build())\n```\n\n也可以指定最大缓存时间：\n\n```java\n.cacheControl(new CacheContorl.Builder().maxStale(365,TimeUnit.DAYS).build())\n```\n\n为了取回缓存的响应，可以简单的调用cacheResponse()：\n\n```java\nCall call = client.newCall(request);\ncall.enqueue(new Callback(){\n    @Override\n    public void onFailure(Call call, IOException e){\n\n    }\n    @Override\n    public void onResponse(Call call, final Response response) throws IOException{\n        final Response text = response.cacheResponse();\n        if(text!=null){\n            Log.d(\"here\", text.toString());\n        }\n    }\n})\n```\n\n## 故障排除\n\nOkHttp可以努力试着在抽象的库中各个层时一步步排除故障。\n\n## HttpLog拦截器\n\n添加HttpLogInterceptor到依赖\n\n```gradle\ncompile 'com.squareup.okhttp3:loging-interceptor:3.3.0'\n```\n\n你需要给HttpLogInterceptor添加网络拦截器:\n\n```java\nOkHttpClient.Builder builder = new OkHttpClient.Builder();\n\nHttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();\n/ Can be Level.BASIC, Level.HEADERS, or Level.BODY\n// See http://square.github.io/okhttp/3.x/logging-interceptor/ to see the     options.\n\nhttpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);\nbuilder.networkInterceptors().add(httpLoggingInterceptor);\nbuilder.build();\n```\n\n## Stetho\n\n用chrome访问网络时需要使用Facebook的Stetho插件 添加gradle配置\n\n```gradle\ndependencies{\n    compile 'com.facebook.stetho:stetho-okhttp3:1.3.0'\n}\n```\n\n当实例化OkHttp时，确保通过StethoInterceptor\n\n```java\nOkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new SethoInterceptor())\n    .build();\n```\n\n最后，确保在Application里初始化了Stetho\n\n```java\npublic class MyApplication extends Application{\n    public void onCreate(){\n        super.onCreate();\n        Stetho.initializeWithDefaults(this);\n    }\n}\n```\n","slug":"Okhttp文档一","published":1,"updated":"2018-04-06T05:12:53.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqdx0005tekr3v3hmpxy"},{"title":"Android Studio使用git无法pull或commit的解决方法","date":"2016-07-13T16:00:00.000Z","_content":"\n## **因为有未解决的冲突commit失败**\n\n**当提交本地出现没解决冲突时会提示提交失败，VCS->Git->Resolve Conflicts**\n\n![](http://img.blog.csdn.net/20160714114410255)\n\n## **因为有冲突merge分支失败**\n\n\n隐藏本地的修改\n![](http://img.blog.csdn.net/20160714114926101)\n\n**合并分支**\n\n![](http://img.blog.csdn.net/20160714114908308)\n\n**显示本地的修改**\n\n![](http://img.blog.csdn.net/20160714114908308)\n\n**显示本地修改之后，就可以解决文件的冲突内容了**","source":"_posts/Studio使用git无法pull或commit的解决方法.md","raw":"---\ntitle: Android Studio使用git无法pull或commit的解决方法\ndate: 2016-07-14 \ntags:\n---\n\n## **因为有未解决的冲突commit失败**\n\n**当提交本地出现没解决冲突时会提示提交失败，VCS->Git->Resolve Conflicts**\n\n![](http://img.blog.csdn.net/20160714114410255)\n\n## **因为有冲突merge分支失败**\n\n\n隐藏本地的修改\n![](http://img.blog.csdn.net/20160714114926101)\n\n**合并分支**\n\n![](http://img.blog.csdn.net/20160714114908308)\n\n**显示本地的修改**\n\n![](http://img.blog.csdn.net/20160714114908308)\n\n**显示本地修改之后，就可以解决文件的冲突内容了**","slug":"Studio使用git无法pull或commit的解决方法","published":1,"updated":"2018-04-06T05:00:46.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqdz0006tekr45x5a6e3"},{"title":"gradle配置","date":"2018-08-07T04:03:09.000Z","_content":"","source":"_posts/gradle配置.md","raw":"---\ntitle: gradle配置\ndate: 2018-08-07 12:03:09\ntags:\n---\n","slug":"gradle配置","published":1,"updated":"2018-08-07T04:03:09.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqe00007tekrukk6m6nc"},{"title":"有进度条的Webview","date":"2016-07-06T16:00:00.000Z","_content":"\n# 带进度条的WebVeiw实现以及进度条和webview之间有空隙的解决方法\n\n给WebView顶部添加加载进度条是非常常用的功能，实现方法也很简单，主要有两种方案：\n\n## 解决思路\n\n- 在布局文件里直接添加ProgressBar\n\n简单粗暴，但是自带的ProgressBar的样式固定，不可控，很可能不满足项目需求\n\n- 集成在WebView里\n\n定制灵活，可完美解决进度条与webview之间的空隙的BUG\n\n## 实现方法\n\n### 直接在布局文件里实现\n\n布局文件如下：webview_layout.xml\n\n```xml\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\"\n              android:orientation=\"vertical\">\n    <ProgressBar\n        style=\"?android:attr/progressBarStyleHorizontal\"\n        android:id=\"@+id/progressbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"5dp\"/>\n\n    <WebView\n        android:id=\"@+id/webview\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n</LinearLayout>\n```\n\n代码如下：\n\n```java\npublic class WebViewActivity extends BaseActivity  {\n  @Override\n   public void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       setContentView(R.layout.webview_layout);\n       webView = (WebView) findViewById(R.id.webview);\n       progressbar =(ProgressBar) findViewById(R.id.progressbar);\n\n      //重写WebChromeClient的onProgressChanged()方法显示进度\n       webView.setWebChromeClient(new WebChromeClient() {\n         @Override\n         public void onProgressChanged(WebView view, int newProgress) {\n             if (newProgress == 100) {\n                 progressbar.setVisibility(View.INVISIBLE);\n             } else {\n                 if (View.INVISIBLE == progressbar.getVisibility()) {\n                     progressbar.setVisibility(View.VISIBLE);\n                 }\n                 progressbar.setProgress(newProgress);\n             }\n             super.onProgressChanged(view, newProgress);\n         }\n\n     });\n       }\n}\n```\n\n### 集成在WebView控件中\n\n该方法需要将progressbar集成到webview，需要重写webview并自定义progressbar的样式\n\n- ##### 自定义progressbar样式：\n\nprogress_bar_states.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<!--WebView顶端的进度条的样式-->  \n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">  \n    <!-- 进度条背景色 -->\n    <item android:id=\"@android:id/background\">  \n        <shape>  \n            <corners android:radius=\"2dp\" />  \n            <gradient  \n                android:angle=\"270\"  \n                android:centerColor=\"#E3E3E3\"  \n                android:endColor=\"#E6E6E6\"  \n                android:startColor=\"#C8C8C8\" />  \n        </shape>  \n    </item>  \n    <!--加载中的进度条的样式-->\n    <item android:id=\"@android:id/progress\">  \n        <clip>  \n            <shape>  \n                <corners android:radius=\"2dp\" />  \n                <!-- 颜色可随便定义为自己需要的颜色 -->\n                <gradient  \n                    android:centerColor=\"#4AEA2F\"  \n                    android:endColor=\"#31CE15\"  \n                    android:startColor=\"#5FEC46\" />  \n            </shape>  \n        </clip>  \n    </item>  \n</layer-list>\n```\n\n- ##### 重写Webview\n\nWebViewWithProgress.java\n\n```java\npublic class WebViewWithProgress extends WebView {\n    private ProgressBar progressBar;\n\n    public WebViewWithProgress(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        /** 在initView之前先判断了一个情况： isInEditMode()， 加入这个函数是不会在XML文件\n          * 打开时弹出一个冗长的错误。也可以不判断\n          */\n        if (!isInEditMode()) {\n            initView(context);\n        }\n        getSettings().setDomStorageEnabled(true);\n\n    }\n\n    private void initView(Context context) {\n        progressBar = new ProgressBar(context, null, android.R.attr.progressBarStyleHorizontal);\n        LayoutParams params = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 10, 0, 0);\n        progressBar.setLayoutParams(params);\n        Drawable drawable;\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {\n            drawable = context.getResources().getDrawable(R.drawable.progress_bar_states, null);\n        } else {\n            drawable = context.getResources().getDrawable(R.drawable.progress_bar_states);\n\n        }\n        progressBar.setProgressDrawable(drawable);\n        addView(progressBar);\n\n    }\n\n    public ProgressBar getProgressBar() {\n        return progressBar;\n    }\n\n  }\n```\n\n- ##### 布局文件\n\n布局文件直接使用用WebViewWithProgress\n\n```xml\n...\n\n<com.bsty.library.webview.WebViewWithProgress\n   android:id=\"@+id/webview\"\n   android:layout_width=\"match_parent\"\n   android:layout_height=\"match_parent\"\n   />\n\n...\n```\n\n- ##### 代码调用自定义的Webview\n\n调用的代码也直接调用，就如初始的Webview一样\n\n```java\nProgressBar progressBar;\nprivate WebViewWithProgress webView;\n@Override\n   public void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.webview_layout);\n         webView = (WebViewWithProgress) findViewById(R.id.webview);\n         progressBar = webview.getProgressBar();\n\n\n         progressBar = webView.getProgressBar();\n          //重写WebChromeClient的onProgressChanged()方法显示进度\n         webView.setWebChromeClient(new WebChromeClient() {\n           @Override\n           public void onProgressChanged(WebView view, int newProgress) {\n               if (newProgress == 100) {\n                   progressbar.setVisibility(View.INVISIBLE);\n               } else {\n                   if (View.INVISIBLE == progressbar.getVisibility()) {\n                       progressbar.setVisibility(View.VISIBLE);\n                   }\n                   progressbar.setProgress(newProgress);\n               }\n               super.onProgressChanged(view, newProgress);\n           }\n\n       });\n```\n","source":"_posts/有进度条的Webview.md","raw":"---\ntitle: 有进度条的Webview\ndate: 2016-07-07 \ntags:\n---\n\n# 带进度条的WebVeiw实现以及进度条和webview之间有空隙的解决方法\n\n给WebView顶部添加加载进度条是非常常用的功能，实现方法也很简单，主要有两种方案：\n\n## 解决思路\n\n- 在布局文件里直接添加ProgressBar\n\n简单粗暴，但是自带的ProgressBar的样式固定，不可控，很可能不满足项目需求\n\n- 集成在WebView里\n\n定制灵活，可完美解决进度条与webview之间的空隙的BUG\n\n## 实现方法\n\n### 直接在布局文件里实现\n\n布局文件如下：webview_layout.xml\n\n```xml\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\"\n              android:orientation=\"vertical\">\n    <ProgressBar\n        style=\"?android:attr/progressBarStyleHorizontal\"\n        android:id=\"@+id/progressbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"5dp\"/>\n\n    <WebView\n        android:id=\"@+id/webview\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n</LinearLayout>\n```\n\n代码如下：\n\n```java\npublic class WebViewActivity extends BaseActivity  {\n  @Override\n   public void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       setContentView(R.layout.webview_layout);\n       webView = (WebView) findViewById(R.id.webview);\n       progressbar =(ProgressBar) findViewById(R.id.progressbar);\n\n      //重写WebChromeClient的onProgressChanged()方法显示进度\n       webView.setWebChromeClient(new WebChromeClient() {\n         @Override\n         public void onProgressChanged(WebView view, int newProgress) {\n             if (newProgress == 100) {\n                 progressbar.setVisibility(View.INVISIBLE);\n             } else {\n                 if (View.INVISIBLE == progressbar.getVisibility()) {\n                     progressbar.setVisibility(View.VISIBLE);\n                 }\n                 progressbar.setProgress(newProgress);\n             }\n             super.onProgressChanged(view, newProgress);\n         }\n\n     });\n       }\n}\n```\n\n### 集成在WebView控件中\n\n该方法需要将progressbar集成到webview，需要重写webview并自定义progressbar的样式\n\n- ##### 自定义progressbar样式：\n\nprogress_bar_states.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<!--WebView顶端的进度条的样式-->  \n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">  \n    <!-- 进度条背景色 -->\n    <item android:id=\"@android:id/background\">  \n        <shape>  \n            <corners android:radius=\"2dp\" />  \n            <gradient  \n                android:angle=\"270\"  \n                android:centerColor=\"#E3E3E3\"  \n                android:endColor=\"#E6E6E6\"  \n                android:startColor=\"#C8C8C8\" />  \n        </shape>  \n    </item>  \n    <!--加载中的进度条的样式-->\n    <item android:id=\"@android:id/progress\">  \n        <clip>  \n            <shape>  \n                <corners android:radius=\"2dp\" />  \n                <!-- 颜色可随便定义为自己需要的颜色 -->\n                <gradient  \n                    android:centerColor=\"#4AEA2F\"  \n                    android:endColor=\"#31CE15\"  \n                    android:startColor=\"#5FEC46\" />  \n            </shape>  \n        </clip>  \n    </item>  \n</layer-list>\n```\n\n- ##### 重写Webview\n\nWebViewWithProgress.java\n\n```java\npublic class WebViewWithProgress extends WebView {\n    private ProgressBar progressBar;\n\n    public WebViewWithProgress(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        /** 在initView之前先判断了一个情况： isInEditMode()， 加入这个函数是不会在XML文件\n          * 打开时弹出一个冗长的错误。也可以不判断\n          */\n        if (!isInEditMode()) {\n            initView(context);\n        }\n        getSettings().setDomStorageEnabled(true);\n\n    }\n\n    private void initView(Context context) {\n        progressBar = new ProgressBar(context, null, android.R.attr.progressBarStyleHorizontal);\n        LayoutParams params = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 10, 0, 0);\n        progressBar.setLayoutParams(params);\n        Drawable drawable;\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {\n            drawable = context.getResources().getDrawable(R.drawable.progress_bar_states, null);\n        } else {\n            drawable = context.getResources().getDrawable(R.drawable.progress_bar_states);\n\n        }\n        progressBar.setProgressDrawable(drawable);\n        addView(progressBar);\n\n    }\n\n    public ProgressBar getProgressBar() {\n        return progressBar;\n    }\n\n  }\n```\n\n- ##### 布局文件\n\n布局文件直接使用用WebViewWithProgress\n\n```xml\n...\n\n<com.bsty.library.webview.WebViewWithProgress\n   android:id=\"@+id/webview\"\n   android:layout_width=\"match_parent\"\n   android:layout_height=\"match_parent\"\n   />\n\n...\n```\n\n- ##### 代码调用自定义的Webview\n\n调用的代码也直接调用，就如初始的Webview一样\n\n```java\nProgressBar progressBar;\nprivate WebViewWithProgress webView;\n@Override\n   public void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.webview_layout);\n         webView = (WebViewWithProgress) findViewById(R.id.webview);\n         progressBar = webview.getProgressBar();\n\n\n         progressBar = webView.getProgressBar();\n          //重写WebChromeClient的onProgressChanged()方法显示进度\n         webView.setWebChromeClient(new WebChromeClient() {\n           @Override\n           public void onProgressChanged(WebView view, int newProgress) {\n               if (newProgress == 100) {\n                   progressbar.setVisibility(View.INVISIBLE);\n               } else {\n                   if (View.INVISIBLE == progressbar.getVisibility()) {\n                       progressbar.setVisibility(View.VISIBLE);\n                   }\n                   progressbar.setProgress(newProgress);\n               }\n               super.onProgressChanged(view, newProgress);\n           }\n\n       });\n```\n","slug":"有进度条的Webview","published":1,"updated":"2018-04-06T05:08:05.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqe10008tekr8h9esfj8"},{"title":"正则表达式与常见转义字符","date":"2016-11-16T16:00:00.000Z","_content":"\n\n## 正则表达式\n\n### 等价\n\n？，*，+,\\d,\\w都是等价字符**\n\n|?|*|+|\\\\d|\\\\w|\n|:---:|:---:|:---:|:---:|:---:|\n|等价于匹配长度{0,1}|等价于匹配长度{0,}|等价于匹配长度{1,}|等价于[0-9]|等价于[A-Za-z0-9]|\n\n<!--\n&nbsp;&nbsp;**？等价于匹配长度{0,1}**\n\n&nbsp;&nbsp;**\\* 等价于匹配长度{0,}**\n\n&nbsp;&nbsp;**\\+ 等价于匹配长度{1,}**\n\n&nbsp;&nbsp;**\\d 等价于[0-9]**\n\n&nbsp;&nbsp;**\\w 等价于[A-Za-z0-9]**-->\n\n### 常用运算符与表达式\n\n|**^**|**开始**|**$**|**结尾**|\n|:---:|:---:|:---:|:---:|\n|**( )**|**域段**|**{n,m}**|**匹配长度**|\n|**[ ]**|**包含**|**[^]**|**不包含**|\n| &VerticalLine; |或|\\\\ |转义|\n|**[A-Z]**|**26个大写字母**|**[a-z]**|**26个小写字母**|\n|**[0-9]**|**0至9数字**|**，**|**分割**|\n\n\n<!--\n&nbsp;&nbsp;**^ 开始**\n\n&nbsp;&nbsp;**() 域段**\n\n&nbsp;&nbsp;**[] 包含，默认是一个字符长度**\n\n&nbsp;&nbsp;**[^] 不包含，默认是一个字符长度**\n\n&nbsp;&nbsp;**{n,m} 匹配长度**\n\n&nbsp;&nbsp;**. 任何当个字符(\\\\. 字符点)**\n\n&nbsp;&nbsp;**| 或**\n\n&nbsp;&nbsp;**\\ 转义**\n\n&nbsp;&nbsp;**$ 结尾**\n\n&nbsp;&nbsp;**[A-Z] 26个大写字母**\n\n&nbsp;&nbsp;**[a-z] 26个小写字母**\n\n&nbsp;&nbsp;**[0-9] 0至9数字**\n\n&nbsp;&nbsp;**，分割**\n-->\n>**分割语法:**\n\n>[A,H,T,W] 包含A或H或T或W字母\n\n>[a,h,t,w] 包含a或t或w字母\n\n>[0,3,6,8] 包含0或3或6或8数字\n\n\n## 二&nbsp;&nbsp;常见转义字符\n\n### Unicode转义字符\n\n&nbsp;&nbsp;**\\u+四个16进制数字；0~65535**\n\n&nbsp;&nbsp;**\\u0000&nbsp;&nbsp;空字符**\n\n### 特殊字符\n\n|双引号|单引号|反斜杠|\n|:---:|:---:|:---:|\n|\\\\\"|\\\\'|\\\\\\\\|\n\n### 控制字符\n\n|单引号字符|反斜杠|回车|换行|走纸换页|横向跳格|退格|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|\\\\'  |\\\\\\\\ |\\\\r  |\\\\n  |\\\\f  |\\\\t  |\\\\b  |\n","source":"_posts/正则表达式.md","raw":"---\ntitle: 正则表达式与常见转义字符\ndate: 2016-11-17 \ntags:\n---\n\n\n## 正则表达式\n\n### 等价\n\n？，*，+,\\d,\\w都是等价字符**\n\n|?|*|+|\\\\d|\\\\w|\n|:---:|:---:|:---:|:---:|:---:|\n|等价于匹配长度{0,1}|等价于匹配长度{0,}|等价于匹配长度{1,}|等价于[0-9]|等价于[A-Za-z0-9]|\n\n<!--\n&nbsp;&nbsp;**？等价于匹配长度{0,1}**\n\n&nbsp;&nbsp;**\\* 等价于匹配长度{0,}**\n\n&nbsp;&nbsp;**\\+ 等价于匹配长度{1,}**\n\n&nbsp;&nbsp;**\\d 等价于[0-9]**\n\n&nbsp;&nbsp;**\\w 等价于[A-Za-z0-9]**-->\n\n### 常用运算符与表达式\n\n|**^**|**开始**|**$**|**结尾**|\n|:---:|:---:|:---:|:---:|\n|**( )**|**域段**|**{n,m}**|**匹配长度**|\n|**[ ]**|**包含**|**[^]**|**不包含**|\n| &VerticalLine; |或|\\\\ |转义|\n|**[A-Z]**|**26个大写字母**|**[a-z]**|**26个小写字母**|\n|**[0-9]**|**0至9数字**|**，**|**分割**|\n\n\n<!--\n&nbsp;&nbsp;**^ 开始**\n\n&nbsp;&nbsp;**() 域段**\n\n&nbsp;&nbsp;**[] 包含，默认是一个字符长度**\n\n&nbsp;&nbsp;**[^] 不包含，默认是一个字符长度**\n\n&nbsp;&nbsp;**{n,m} 匹配长度**\n\n&nbsp;&nbsp;**. 任何当个字符(\\\\. 字符点)**\n\n&nbsp;&nbsp;**| 或**\n\n&nbsp;&nbsp;**\\ 转义**\n\n&nbsp;&nbsp;**$ 结尾**\n\n&nbsp;&nbsp;**[A-Z] 26个大写字母**\n\n&nbsp;&nbsp;**[a-z] 26个小写字母**\n\n&nbsp;&nbsp;**[0-9] 0至9数字**\n\n&nbsp;&nbsp;**，分割**\n-->\n>**分割语法:**\n\n>[A,H,T,W] 包含A或H或T或W字母\n\n>[a,h,t,w] 包含a或t或w字母\n\n>[0,3,6,8] 包含0或3或6或8数字\n\n\n## 二&nbsp;&nbsp;常见转义字符\n\n### Unicode转义字符\n\n&nbsp;&nbsp;**\\u+四个16进制数字；0~65535**\n\n&nbsp;&nbsp;**\\u0000&nbsp;&nbsp;空字符**\n\n### 特殊字符\n\n|双引号|单引号|反斜杠|\n|:---:|:---:|:---:|\n|\\\\\"|\\\\'|\\\\\\\\|\n\n### 控制字符\n\n|单引号字符|反斜杠|回车|换行|走纸换页|横向跳格|退格|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|\\\\'  |\\\\\\\\ |\\\\r  |\\\\n  |\\\\f  |\\\\t  |\\\\b  |\n","slug":"正则表达式","published":1,"updated":"2018-04-06T03:28:48.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqe30009tekr4a4fg6h1"},{"title":"webview上传图片","date":"2018-08-06T02:26:48.000Z","_content":"\n","source":"_posts/webview上传图片.md","raw":"---\ntitle: webview上传图片\ndate: 2018-08-06 10:26:48\ntags:\n---\n\n","slug":"webview上传图片","published":1,"updated":"2018-08-06T02:27:01.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqe5000atekrba0d4lqh"},{"title":"浏览器启动app","date":"2017-06-01T16:00:00.000Z","_content":"\n##  配置manifest.xml\n\n    <activity android:name=\".MainActivity\">\n      <!-- 正常启动 -->\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\"/>\n        <category android:name=\"android.intent.category.LAUNCHER\"/>\n      </intent-filter>\n      <!--URL Scheme启动-->\n      <intent-filter>\n        <!-- 必有项 -->\n        <action android:name=\"android.intent.action.VIEW\"/>\n        <!-- 应用可以通过浏览器的链接启动-->\n        <category android:name=\"android.intent.category.BROWSABLE\"/>\n        <!--可以被隐式调用(必须加)-->\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <!-- 协议部分 -->\n        <data android:host=\"za_auth_activity\"\n              android:scheme=\"zaurlscheme\"/>\n      </intent-filter>\n    </activity>\n\n\n## 启动App\n\n    /**\n     * App内启动\n     */\n\n    Uri uri = Uri.parse(\"zaurlscheme://za_auth_activity\");\n    Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n    //保证新启动的app有单独的堆栈，如果希望启动的app和原有的app同一个堆栈则不用写\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    try{\n        startActivityForResult(intent,RESULT_OK);\n      }catch(Exception e){\n        e.printStackTrace();\n        Toast.makeText(MainActivity.this,\"没有匹配的APP，请下载安装\",Toast.LENGTH_SHORT).show();\n    }\n\n    <!-- 网页启动 -->\n    <a href=\"zaurlschemel://za_auth_activity\">打开新的应用</a>\n\n    <!--  js调用-->\n\n    window.location = \"zaurlschemel://za_auth_activity\";\n\n\n> 判断URL Scheme是否有效\n\n    boolean checkUrlScheme(Intent intent){\n      PackageManager packageManager = getPackageManager();\n      List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);\n      return !activities.isEmpty();\n    }\n","source":"_posts/浏览器启动app.md","raw":"---\ntitle: 浏览器启动app\ndate: 2017-06-02 \ntags:\n---\n\n##  配置manifest.xml\n\n    <activity android:name=\".MainActivity\">\n      <!-- 正常启动 -->\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\"/>\n        <category android:name=\"android.intent.category.LAUNCHER\"/>\n      </intent-filter>\n      <!--URL Scheme启动-->\n      <intent-filter>\n        <!-- 必有项 -->\n        <action android:name=\"android.intent.action.VIEW\"/>\n        <!-- 应用可以通过浏览器的链接启动-->\n        <category android:name=\"android.intent.category.BROWSABLE\"/>\n        <!--可以被隐式调用(必须加)-->\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <!-- 协议部分 -->\n        <data android:host=\"za_auth_activity\"\n              android:scheme=\"zaurlscheme\"/>\n      </intent-filter>\n    </activity>\n\n\n## 启动App\n\n    /**\n     * App内启动\n     */\n\n    Uri uri = Uri.parse(\"zaurlscheme://za_auth_activity\");\n    Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n    //保证新启动的app有单独的堆栈，如果希望启动的app和原有的app同一个堆栈则不用写\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    try{\n        startActivityForResult(intent,RESULT_OK);\n      }catch(Exception e){\n        e.printStackTrace();\n        Toast.makeText(MainActivity.this,\"没有匹配的APP，请下载安装\",Toast.LENGTH_SHORT).show();\n    }\n\n    <!-- 网页启动 -->\n    <a href=\"zaurlschemel://za_auth_activity\">打开新的应用</a>\n\n    <!--  js调用-->\n\n    window.location = \"zaurlschemel://za_auth_activity\";\n\n\n> 判断URL Scheme是否有效\n\n    boolean checkUrlScheme(Intent intent){\n      PackageManager packageManager = getPackageManager();\n      List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);\n      return !activities.isEmpty();\n    }\n","slug":"浏览器启动app","published":1,"updated":"2018-04-06T05:22:42.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqe6000btekrpml3n2f5"},{"title":"mac编译vim","date":"2018-08-30T09:28:19.000Z","_content":"\n## VIM安装\n\n### 卸载brew 安装的vim\n\n    brew uninstall vim\n\n### 下载源码包\n\n[vim 8.1.0197 下载地址](https://codeload.github.com/vim/vim/tar.gz/v8.1.0197)\n\n### 编译安装\n\n    # 解压\n    $ tar -xzvf ~/Downloads/vim-8.1.0197.tar.gz\n\n    $ cd vim-8.1.0197\n\n    # 查看编译支持的选项\n    $ ./configure -h\n\n    # 编译选项配置: python2/3 perl ruby lua\n    ./configure \\\n    --enable-multibyte \\\n    --enable-perlinterp=dynamic \\\n    --enable-rubyinterp=dynamic \\\n    --with-ruby-command=/usr/local/bin/ruby \\\n    --enable-pythoninterp=dynamic \\\n    --with-python-config-dir=/usr/lib/python2.7/config \\\n    --enable-python3interp \\\n    --with-python3-config-dir=/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/config-3.7m-darwin \\\n    --enable-luainterp \\\n    --with-lua-prefix=/usr/local/Cellar/lua/5.3.5_1 \\\n    --enable-cscope \\\n    --enable-gui=auto \\\n    --with-features=huge \\\n    --enable-fontset \\\n    --enable-largefile \\\n    --disable-netbeans \\\n    --enable-fail-if-missing \\\n    --prefix=/usr/local/vim8\n\n    # 编译安装\n    $ make && make install\n\n    # 确认是否安装成功: 并可以检查是否支持了 python2/3 lua等解释器\n    # 由于设置了 --prefix=/usr/local/vim8 所以全路径是这样\n    $ /usr/local/vim8/bin/vim --version\n\n    # 查看 老的vim路径, 并删除掉\n    $ ll `which vim`\n    $ rm /usr/local/bin/vim\n\n    # 创建软链\n    $ ln -s /usr/local/vim8/bin/vim /usr/local/bin/vim\n\n    # 再次查看版本号, 确定是否已经支持\n    $ vim --version\n\n> 注意python 和lua的本地路径是否对应","source":"_posts/mac编译vim.md","raw":"---\ntitle: mac编译vim\ndate: 2018-08-30 17:28:19\ntags:\n---\n\n## VIM安装\n\n### 卸载brew 安装的vim\n\n    brew uninstall vim\n\n### 下载源码包\n\n[vim 8.1.0197 下载地址](https://codeload.github.com/vim/vim/tar.gz/v8.1.0197)\n\n### 编译安装\n\n    # 解压\n    $ tar -xzvf ~/Downloads/vim-8.1.0197.tar.gz\n\n    $ cd vim-8.1.0197\n\n    # 查看编译支持的选项\n    $ ./configure -h\n\n    # 编译选项配置: python2/3 perl ruby lua\n    ./configure \\\n    --enable-multibyte \\\n    --enable-perlinterp=dynamic \\\n    --enable-rubyinterp=dynamic \\\n    --with-ruby-command=/usr/local/bin/ruby \\\n    --enable-pythoninterp=dynamic \\\n    --with-python-config-dir=/usr/lib/python2.7/config \\\n    --enable-python3interp \\\n    --with-python3-config-dir=/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/config-3.7m-darwin \\\n    --enable-luainterp \\\n    --with-lua-prefix=/usr/local/Cellar/lua/5.3.5_1 \\\n    --enable-cscope \\\n    --enable-gui=auto \\\n    --with-features=huge \\\n    --enable-fontset \\\n    --enable-largefile \\\n    --disable-netbeans \\\n    --enable-fail-if-missing \\\n    --prefix=/usr/local/vim8\n\n    # 编译安装\n    $ make && make install\n\n    # 确认是否安装成功: 并可以检查是否支持了 python2/3 lua等解释器\n    # 由于设置了 --prefix=/usr/local/vim8 所以全路径是这样\n    $ /usr/local/vim8/bin/vim --version\n\n    # 查看 老的vim路径, 并删除掉\n    $ ll `which vim`\n    $ rm /usr/local/bin/vim\n\n    # 创建软链\n    $ ln -s /usr/local/vim8/bin/vim /usr/local/bin/vim\n\n    # 再次查看版本号, 确定是否已经支持\n    $ vim --version\n\n> 注意python 和lua的本地路径是否对应","slug":"mac编译vim","published":1,"updated":"2018-08-30T09:34:44.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqe8000ctekrkyy8i69c"},{"title":"反编译和重新签名apk","date":"2017-04-05T16:00:00.000Z","_content":"\n## 反编译资源文件\n\n#### 工具---apktool\n[下载地址](https://ibotpeaches.github.io/Apktool/install)\n\n反编译命令：\n\n    apktool d toDecompile.apk\n\n重新打包：\n\n    apktool b toDecompile -o new_test.apk\n\n重新签名：\n\n    jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名\n\n## 反编译代码\n\n#### 工具----dex2jar\n\n[下载地址](https://sourceforge.net/projects/dex2jar/files/)\n\n将要反编译的apk文件重命名为zip格式并解压缩，注意其中的classes.dex文件，它存放了全部的java代码，将classes.dex文件拷贝到dex2jar解压后的根目录下。\n\n进入dex2jar解压后的根目录，执行命令：\n\n    d2j-dex2jar classes.dex\n\n要查看java代码，还需要下载jd-gui这个工具，下载地址：http://jd.benow.ca/ ，\n目前最新版是1.4.0，下载完后解压缩，并用jd-gui.exe打开上边反编译出来的jar文件\n","source":"_posts/反编译和重新签名apk.md","raw":"---\ntitle: 反编译和重新签名apk\ndate: 2017-04-06 \ntags:\n---\n\n## 反编译资源文件\n\n#### 工具---apktool\n[下载地址](https://ibotpeaches.github.io/Apktool/install)\n\n反编译命令：\n\n    apktool d toDecompile.apk\n\n重新打包：\n\n    apktool b toDecompile -o new_test.apk\n\n重新签名：\n\n    jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名\n\n## 反编译代码\n\n#### 工具----dex2jar\n\n[下载地址](https://sourceforge.net/projects/dex2jar/files/)\n\n将要反编译的apk文件重命名为zip格式并解压缩，注意其中的classes.dex文件，它存放了全部的java代码，将classes.dex文件拷贝到dex2jar解压后的根目录下。\n\n进入dex2jar解压后的根目录，执行命令：\n\n    d2j-dex2jar classes.dex\n\n要查看java代码，还需要下载jd-gui这个工具，下载地址：http://jd.benow.ca/ ，\n目前最新版是1.4.0，下载完后解压缩，并用jd-gui.exe打开上边反编译出来的jar文件\n","slug":"反编译和重新签名apk","published":1,"updated":"2018-04-06T05:27:02.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqea000dtekruszvcegp"},{"title":"网站收藏","date":"2018-08-08T02:21:37.000Z","_content":"\n### Charles在线破解\n\n[https://www.zzzmode.com/mytools/charles/](https://www.zzzmode.com/mytools/charles/)","source":"_posts/网站收藏.md","raw":"---\ntitle: 网站收藏\ndate: 2018-08-08 10:21:37\ntags:\n---\n\n### Charles在线破解\n\n[https://www.zzzmode.com/mytools/charles/](https://www.zzzmode.com/mytools/charles/)","slug":"网站收藏","published":1,"updated":"2018-08-08T02:25:58.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgdiqeb000etekrtxyhsv38"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}